C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SYSTIMER
OBJECT MODULE PLACED IN .\Output\SysTimer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SysTimer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECT
                    -EXTEND PRINT(.\Listings\SysTimer.lst) TABS(2) OBJECT(.\Output\SysTimer.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  SysTimer.c                                                                */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          
   9          
  10          #include <math.h>
  11          #include <stdio.h>
  12          
  13          #include "Config.h"
  14          
  15          #include "reg.h"
  16          #include "typedefs.h"
  17          #include "main.h"
  18          #include "i2c.h"
  19          #include "adc.h"
  20          #include "etc_eep.h"
  21          #include "Printf.h"
  22          #include "KeyRemo.h"
  23          #include "Monitor.h"
  24          #include "CPU.h"
  25          #include "HS_DVRProtocol.h"
  26          
  27          
  28          //****************************************************************************
  29          // DEFINITIONS / MACROS
  30          //****************************************************************************
  31          #define GET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid)
  32          #define SET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _TRUE)
  33          #define CLR_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _FALSE)
  34          
  35          #define GET_EVENT_ID(x)                         (g_stTimerEvent[x].b7EventID)
  36          #define SET_EVENT_ID(x, y)                      (g_stTimerEvent[x].b7EventID = y)
  37          
  38          #define GET_EVENT_TIME(x)                       (g_stTimerEvent[x].usTime)
  39          #define SET_EVENT_TIME(x, y)                    (g_stTimerEvent[x].usTime = y)
  40          
  41          
  42          //****************************************************************************
  43          // VARIABLE DECLARATIONS
  44          //****************************************************************************
  45          bit g_bNotifyTimer0Int = _FALSE;
  46          volatile WORD  g_usTimerCounter = 0;
  47          StructTimerEventTableType g_stTimerEvent[_TIMER_EVENT_COUNT];
  48          WORD BatteryBTH=549/*156*//*650*//*880*/,BatteryVoltage=880;
  49          BYTE WDT_Echo_Count=0;
  50          BYTE STAT1_temp=OFF, STAT2_temp=ON,STAT1_Flag=OFF,STAT2_Flag=ON;
  51          
  52          BYTE BattDetect1_COUNT=0, BattDetect2_COUNT=0, BattDetect3_COUNT=0, BattDetect4_COUNT=0,BattDetect5_COUNT=
             -0;
  53          BYTE BattDetectMin_COUNT=0, BattDetectHigh_COUNT=0,BattDetectHighStop_COUNT=0,BattDetectNoStartUp_COUNT=0,
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 2   

             -BattDetectStartUp_COUNT=0;
  54          BYTE  BATERY_STAT=0xFF,BATERY_STAT_TEMP=0xFE;
  55          BYTE TEMP_NORMAL_COUNT=0,TEMP_LOW_COUNT=0, TEMP_LOW_WARN_COUNT=0, TEMP_HIGH_COUNT=0,TEMP_HIGH_WARN_COUNT=0
             -;
  56          BYTE TEMP_STAT=0xFF;
  57          BYTE PWM_TEMP=0;  
  58          BYTE CHARGE_TEMP_ABNORMAL=0;
  59          BYTE CHARGE_TEMP_NORMAL=0;
  60          
  61          #if (_DEBUG_MESSAGE_Monitor==ON)
              bit Monitor_flag=OFF;
              #endif
  64          
  65          extern BYTE PowerFlag;
  66          extern BYTE CameraVolt;
  67          extern BYTE PWR_START_flag;
  68          extern StructBatteryInfoType g_stBatteryInfo;
  69          extern BYTE EncorderCountPN;
  70          extern BYTE EncorderLenint;
  71          extern short EncorderCount;
  72          extern WORD EncorderLenfloaat;
  73          extern StructPowerInfoType idata g_stPowerInfo;
  74          extern BYTE day,hour,minute,second;
  75          extern StructDVRInfoType g_stDVRInfo;
  76          extern BYTE Power_down_mode;
  77          
  78          
  79          //--------------------------------------------------
  80          // Definitions of Timer2
  81          //--------------------------------------------------
  82          #define _EVENT_TIME_MAX                         61000 // Please do not modify this value.
  83          
  84          //****************************************************************************
  85          // CODE TABLES
  86          //****************************************************************************
  87          
  88          
  89          //****************************************************************************
  90          // FUNCTION DECLARATIONS
  91          //****************************************************************************
  92          void SysTimerHandler(void);
  93          void SysTimerEventProc(EnumSystemTimerEventID enumEventID);
  94          void MCUTimerInitialTimerEvent(void);
  95          void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID);
  96          void MCUTimerCancelTimerEvent(BYTE ucEventID);
  97          void MCUTimerDelayXms(WORD usNum);
  98          extern WORD GetBatteryBTH(void);
  99          extern WORD GetBatteryVoltage(void);
 100          extern void SetAD5110Step(BYTE newv) ;
 101          extern void UserInterfacePowerSwitch(EnumPowerAction enumSwitch);
 102          extern void SysPowerSwitch(EnumPowerAction enumSwitch);
 103          extern void UserInterfaceBatteryChargeMode(EnumBatteryStatus enumSwitch);
 104          extern void SET_MCU_POWER_DOWN_MODE(void);
 105          
 106          
 107          //****************************************************************************
 108          // FUNCTION DEFINITIONS
 109          //****************************************************************************
 110          //--------------------------------------------------
 111          // Description  : Timer Delay
 112          // Input Value  : usNum --> Delay in ms
 113          // Output Value : None
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 3   

 114          //--------------------------------------------------
 115          void MCUTimerDelayXms(WORD usNum)
 116          {
 117   1          if(usNum)
 118   1          {
 119   2              g_bNotifyTimer0Int = _FALSE;
 120   2      
 121   2              while(_TRUE)
 122   2              {
 123   3                  if(g_bNotifyTimer0Int)
 124   3                  {
 125   4                      g_bNotifyTimer0Int = _FALSE;
 126   4      
 127   4                      if(--usNum)
 128   4                      {
 129   5                      }
 130   4                      else
 131   4                      {
 132   5                          return;
 133   5                      }
 134   4                  }
 135   3              }
 136   2          }
 137   1      }
 138          
 139          //--------------------------------------------------
 140          // Description  : Get Event Time
 141          // Input Value  : ucEventIndex --> Event which time is needed
 142          // Output Value : Event Time
 143          //--------------------------------------------------
 144          WORD MCUTimerGetEventTime(BYTE ucEventIndex)
 145          {
 146   1          return GET_EVENT_TIME(ucEventIndex);
 147   1      }
 148          
 149          //--------------------------------------------------
 150          // Description  : Get Event ID
 151          // Input Value  : Referenced Event Index
 152          // Output Value : Stored Event ID
 153          //--------------------------------------------------
 154          BYTE MCUTimerGetEventID(BYTE ucEventIndex)
 155          {
 156   1          return GET_EVENT_ID(ucEventIndex);
 157   1      }
 158          
 159          //--------------------------------------------------
 160          // Description  : Clear Event Time
 161          // Input Value  : ucEventIndex --> Event which time is needed to be cleared
 162          // Output Value : None
 163          //--------------------------------------------------
 164          
 165          
 166          void MCUTimerClrEventValid(BYTE ucEventIndex)
 167          {
 168   1          CLR_EVENT_VALID(ucEventIndex);
 169   1      }
 170          
 171          //--------------------------------------------------
 172          // Description  : Check if Event is Valid
 173          // Input Value  : ucEventIndex --> Event to be checked
 174          // Output Value : Validity(_TRUE/_FALSE)
 175          //--------------------------------------------------
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 4   

 176          bit MCUTimerCheckEventValid(BYTE ucEventIndex)
 177          {
 178   1          return GET_EVENT_VALID(ucEventIndex);;
 179   1      }
 180          
 181          //--------------------------------------------------
 182          // Description  : Get Timer Counter.
 183          // Input Value  : None
 184          // Output Value : Timer Counter
 185          //--------------------------------------------------
 186          WORD MCUTimerGetTimerCounter(void)
 187          {
 188   1          WORD usPresentTime = g_usTimerCounter;
 189   1         
 190   1          // When get counter,timer interrupt maybe change counter.
 191   1          // Get twice to avoid it.
 192   1          if(abs(g_usTimerCounter - usPresentTime) > 0x7F)
 193   1          {
 194   2              usPresentTime = g_usTimerCounter;
 195   2          } 
 196   1      
 197   1          return usPresentTime;
 198   1      }
 199          //--------------------------------------------------
 200          // Description  : Check timer and events. We have to run this function when setting up a timer for an even
             -t.
 201          // Input Value  : usTime    --> Unit in 1ms, range in 0.001 ~ 61sec
 202          // Output Value : Return usPresentTime
 203          //--------------------------------------------------
 204          WORD MCUTimerCheckTimerEvent(WORD usTime)
 205          {
 206   1          BYTE ucTimerEventCnt = 0;
 207   1          WORD usPresentTime = 0;
 208   1      
 209   1          usPresentTime = MCUTimerGetTimerCounter();
 210   1          
 211   1          if(usTime > _EVENT_TIME_MAX) 
 212   1          {
 213   2              usTime = _EVENT_TIME_MAX;
 214   2          }
 215   1         
 216   1          if(((usPresentTime + usTime) > _EVENT_TIME_MAX) || // Size Limit of Timer Counter             
 217   1             ((usPresentTime + usTime) < usPresentTime)) // Timer Counter Overflow
 218   1          { 
 219   2              g_usTimerCounter = 0;
 220   2          
 221   2              // Reset Timer Event Counter
 222   2              for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 223   2              {
 224   3                  if(GET_EVENT_VALID(ucTimerEventCnt) == _TRUE)
 225   3                  {
 226   4                      if(GET_EVENT_TIME(ucTimerEventCnt) > usPresentTime)
 227   4                      {
 228   5                          SET_EVENT_TIME(ucTimerEventCnt, (GET_EVENT_TIME(ucTimerEventCnt) - usPresentTime));
 229   5                      }
 230   4                      else
 231   4                      {
 232   5                          SET_EVENT_TIME(ucTimerEventCnt, 0);
 233   5                      }
 234   4                  }
 235   3              }
 236   2              
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 5   

 237   2              usPresentTime = 0;
 238   2          }    
 239   1      
 240   1          return usPresentTime;
 241   1      }
 242          
 243          //--------------------------------------------------
 244          // Description  : Initial timer and events. We have to run this function at firmware startup
 245          // Input Value  : None
 246          // Output Value : None
 247          //--------------------------------------------------
 248          void MCUTimerInitialTimerEvent(void)
 249          {
 250   1          BYTE ucTimerEventCnt = 0;
 251   1      
 252   1          for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 253   1          {
 254   2              CLR_EVENT_VALID(ucTimerEventCnt);
 255   2          }
 256   1      
 257   1         // TR2 = 1;
 258   1      }
 259          
 260          //--------------------------------------------------
 261          // Description  : Active Timer Event
 262          // Input Value  : usTime --> Time to active Timer Event
 263          //          ucEventID --> Event to be actived
 264          // Output Value : None
 265          //--------------------------------------------------
 266          void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID)
 267          {
 268   1          BYTE ucEventIndex = 0;
 269   1      
 270   1          // Search for Existing Event with the same Event ID
 271   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 272   1          {
 273   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 274   2              {
 275   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 276   3                  {
 277   4                      return;
 278   4                  }
 279   3              }
 280   2          }
 281   1      
 282   1          // Choose any Vacant Storage for Event
 283   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 284   1          {
 285   2              if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 286   2              {
 287   3                  SET_EVENT_VALID(ucEventIndex);
 288   3                  SET_EVENT_ID(ucEventIndex, ucEventID);
 289   3                  SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 290   3                  return;
 291   3              }
 292   2          }
 293   1      
 294   1          //Printf("No More Available Storage for Simultaneous Event!!!!!!");
 295   1      }
 296          
 297          //--------------------------------------------------
 298          // Description  : Cancel an event
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 6   

 299          // Input Value  : Event     --> Event which we want to cancel
 300          // Output Value : None
 301          //--------------------------------------------------
 302          void MCUTimerCancelTimerEvent(BYTE ucEventID)
 303          {
 304   1          BYTE ucEventIndex = 0;
 305   1          
 306   1          // Search for Existing Event with the same Event ID
 307   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 308   1          {
 309   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 310   2              {
 311   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 312   3                  {
 313   4                      CLR_EVENT_VALID(ucEventIndex);
 314   4                      return;
 315   4                  }
 316   3              }
 317   2          }      
 318   1      }
 319          
 320          //--------------------------------------------------
 321          // Description  : Reactive a timer for an event. If the event is exist,
 322          //                this function will reset the executing time and restart.
 323          // Input Value  : usTime    --> Unit in 1ms, range in 0.01 ~ 61 sec
 324          //                Event     --> Execute Event while timeup
 325          // Output Value : None
 326          //--------------------------------------------------
 327          void MCUTimerReactiveTimerEvent(WORD usTime, BYTE ucEventID)
 328          {
 329   1          BYTE ucEventIndex = 0;
 330   1      
 331   1          // Search for Existing Event with the same Event ID
 332   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 333   1          {
 334   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 335   2              {
 336   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 337   3                  {
 338   4                      SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 339   4                      return;
 340   4                  }
 341   3              }
 342   2          }    
 343   1      
 344   1          // Choose any Vacant Storage for Event
 345   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 346   1          {
 347   2              if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 348   2              {
 349   3                  SET_EVENT_VALID(ucEventIndex);
 350   3                  SET_EVENT_ID(ucEventIndex, ucEventID);
 351   3                  SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 352   3                  return;
 353   3              }
 354   2          }   
 355   1      }
 356          
 357          
 358          void UserInterfaceTimerEventProc(BYTE ucEventID)
 359          {
 360   1      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 7   

 361   1      switch(ucEventID)
 362   1      {
 363   2      
 364   2        case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_INC:
 365   2            SetAD5110Step(CameraVolt);
 366   2            WriteEEP(EEP_CameraVolt, CameraVolt);  
 367   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(YELLOW,"(CAM_INC %d)",(WORD)(CameraVolt));  
                    #endif
 370   2              break;
 371   2      
 372   2        case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_DEC:
 373   2            SetAD5110Step(CameraVolt);  
 374   2            WriteEEP(EEP_CameraVolt, CameraVolt);  
 375   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(YELLOW,"(CAM_DEC %d)",(WORD)(CameraVolt));  
                    #endif
 378   2            break;
 379   2              case _USER_TIMER_EVENT_OSD_SET_CAMERA_VOLTAGE:
 380   2            SetAD5110Step(CameraVolt);  
 381   2            WriteEEP(EEP_CameraVolt, CameraVolt);     
 382   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(MAGENTA,"(CAM_VOLT_LEVEL=%d)",(WORD)(CameraVolt));  
                    #endif
 385   2            break;
 386   2              case _USER_TIMER_EVENT_OSD_GET_MCU_VERSION:
 387   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REPLY_MCU_FW);  
 388   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(YELLOW,"(GET_MCU_VERSION)");  
                    #endif
 391   2            break;
 392   2      
 393   2        case _USER_TIMER_EVENT_OSD_DVR_FACTORY_MODE:
 394   2      
 395   2              if(GET_AC_PLUG()==_TRUE)
 396   2              {
 397   3              MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_ENTRY_FACTORY);     
 398   3              #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                      GraphicsPrint(RED,"(DVR_FACTORY_MODE)");  
                      #endif
 401   3              }
 402   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    else
                      {
                      GraphicsPrint(RED,"(DVR_FACTORY_FAIL)");      
                      }
                    #endif
 408   2            
 409   2            break;
 410   2      
 411   2             case _USER_TIMER_EVENT_OSD_MCU_ENTRY_SLEEP_MODE:
 412   2          
 413   2              if(GET_DVR_EntrySleepMode()==_FALSE)
 414   2              {
 415   3              SET_TARGET_POWER_STATUS(_POWER_STATUS_SAVING);
 416   3              SET_DVR_EntrySleepMode();
 417   3              #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                        GraphicsPrint(YELLOW,"(MCU_NORMAL_TO_SLEEP_MODE)");    
                      #endif        
 420   3              }
 421   2              break;
 422   2      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 8   

 423   2        case _USER_TIMER_EVENT_OSD_DISTANCE_RESET:
 424   2          EncorderCount=0;
 425   2          EncorderLenint=0;
 426   2          EncorderLenfloaat=0;
 427   2          EncorderCountPN=0;
 428   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                  GraphicsPrint(YELLOW,"\r\n ClearEncorder ",0);
                  #endif
 431   2             //Printf("(DISTANCE_RESET)");   
 432   2             break;
 433   2      
 434   2         case _USER_TIMER_EVENT_OSD_DVR_REBOOT:
 435   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                     GraphicsPrint(YELLOW,"(DVR_REBOOT)");  
                     #endif
 438   2              if(GET_DVR_Reboot()==_TRUE) 
 439   2                {
 440   3                CLR_DVR_Reboot();
 441   3                CLR_DVR_SystemReadyNotic();
 442   3                 UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_OFF);
 443   3                MCUTimerActiveTimerEvent(SEC(3), _USER_TIMER_EVENT_OSD_DVR_REBOOT);
 444   3                }
 445   2              else
 446   2              {
 447   3                 UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_ON);
 448   3              }
 449   2              break;
 450   2      
 451   2         case _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN:
 452   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                     GraphicsPrint(YELLOW,"(DVR_SHUTDOWN)");  
                    #endif
 455   2            SET_DVR_Shutdown();
 456   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN);
 457   2             MCUTimerActiveTimerEvent(SEC(15), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
 458   2             break;
 459   2      
 460   2            case  _USER_TIMER_EVENT_OSD_DVR_ENTER_ISP_MODE:
 461   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                     GraphicsPrint(YELLOW,"(MCU_ENTER_ISP_MODE)");      
                  #endif
 464   2              enter_isp();
 465   2             break;
 466   2      
 467   2        case _USER_TIMER_EVENT_OSD_ENCODER_DEVIATION_SETTING:     
 468   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(YELLOW,"(ENCODER_SET)");  
                    #endif
 471   2            break;
 472   2      
 473   2        case _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON:
 474   2          SET_PWCTRL();
 475   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                  GraphicsPrint(YELLOW,"(Panel_ON)"); 
                  #endif
 478   2             UserInterfacePowerSwitch(_POWER_ACTION_PANEL_POWER_ON);    
 479   2          break;
 480   2      
 481   2        case _USER_TIMER_EVENT_OSD_DVR_STOP_REBOOT:
 482   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                  GraphicsPrint(YELLOW,"(DVR STOP REBOOT)");  
                  #endif
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 9   

 485   2          break;
 486   2      
 487   2        #if (_DEBUG_MESSAGE_Monitor==ON)
                case _USER_TIMER_EVENT_Monitor_ON:
                 Monitor_flag=_FALSE;
                  break;
                #endif
 492   2      
 493   2         default:   break;
 494   2         
 495   2      
 496   2      }
 497   1        
 498   1      }
 499          
 500          //--------------------------------------------------
 501          // Description  : Timer Handler
 502          // Input Value  : None
 503          // Output Value : None
 504          //--------------------------------------------------
 505          void SysTimerHandler(void)
 506          {
 507   1          BYTE ucTimerEventIndex = 0;
 508   1          BYTE ucTimerEventID = 0;    
 509   1          WORD usPresentTime = 0;
 510   1      
 511   1          for(ucTimerEventIndex = 0; ucTimerEventIndex < _TIMER_EVENT_COUNT; ucTimerEventIndex++)
 512   1          {
 513   2              usPresentTime = MCUTimerGetTimerCounter();
 514   2      
 515   2              if(MCUTimerCheckEventValid(ucTimerEventIndex) == _FALSE)
 516   2              {
 517   3                  continue;
 518   3              }         
 519   2              
 520   2              if(usPresentTime > MCUTimerGetEventTime(ucTimerEventIndex))
 521   2              {
 522   3                  MCUTimerClrEventValid(ucTimerEventIndex);
 523   3      
 524   3                  // Get Event ID From Event Index
 525   3                  ucTimerEventID = MCUTimerGetEventID(ucTimerEventIndex);
 526   3                  
 527   3                  if(ucTimerEventID < _USER_TIMER_EVENT_END)
 528   3                  {
 529   4                      UserInterfaceTimerEventProc(ucTimerEventID);
 530   4                      
 531   4                      continue;
 532   4                  }
 533   3      
 534   3                  if(ucTimerEventID < _SYSTEM_TIMER_EVENT_END)
 535   3                  {
 536   4                      SysTimerEventProc(ucTimerEventID);
 537   4                      
 538   4                      continue;
 539   4                  }
 540   3                  
 541   3               //   MCUTimerEventProc(ucTimerEventID);
 542   3              }
 543   2          }
 544   1      
 545   1      }
 546          
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 10  

 547          //--------------------------------------------------
 548          // Description  : Timer Event Process
 549          // Input Value  : enumEventID --> Event to be processed
 550          // Output Value : None
 551          //--------------------------------------------------
 552          void SysTimerEventProc(EnumSystemTimerEventID enumEventID)
 553          {
 554   1      
 555   1      switch(enumEventID)
 556   1         { 
 557   2         case _SYSTEM_TIMER_EVENT_GRN_RED_OFF:
 558   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 559   2        break;
 560   2      
 561   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF:
 562   2         PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF);
 563   2        break;
 564   2      
 565   2         case _SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON: 
 566   2          PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 567   2        break;
 568   2      
 569   2         case _SYSTEM_TIMER_EVENT_GRN_RED_ON:
 570   2            PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_ON);
 571   2          break;
 572   2      
 573   2         case _SYSTEM_TIMER_EVENT_GRN_BLINK:
 574   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 575   2           MCUTimerActiveTimerEvent(SEC(0.25), _SYSTEM_TIMER_EVENT_GRN_BLINK);
 576   2          break;
 577   2      
 578   2         case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK:
 579   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 580   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_2S_BLINK);
 581   2          break;
 582   2      
 583   2         case _SYSTEM_TIMER_EVENT_RED_BLINK:
 584   2           PowerLED(_SYSTEM_TIMER_EVENT_RED_BLINK);
 585   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_RED_BLINK);
 586   2      
 587   2          break;  
 588   2      
 589   2        case _SYSTEM_TIMER_EVENT_GRN_RED_BLINK:
 590   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
 591   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
 592   2      
 593   2         break; 
 594   2      
 595   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK:
 596   2          PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
 597   2          MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
 598   2          break; 
 599   2          break;
 600   2      
 601   2         case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON:
 602   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 603   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 604   2              break;
 605   2       case _SYSTEM_TIMER_EVENT_BATT_LOW_RED_BLINK:
 606   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 607   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 608   2        MCUTimerDelayXms(500);
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 11  

 609   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 610   2        MCUTimerDelayXms(500);
 611   2      
 612   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 613   2        MCUTimerDelayXms(500);
 614   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 615   2        MCUTimerDelayXms(500);
 616   2      
 617   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 618   2        MCUTimerDelayXms(500);
 619   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 620   2        MCUTimerDelayXms(500);
 621   2      
 622   2        SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
 623   2        break;
 624   2        
 625   2         case _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE:
 626   2        
 627   2          if(Check_ADAP_IN()==_TRUE)    
 628   2          {
 629   3            
 630   3                  if(GET_AC_PLUG()==_FALSE)
 631   3                  { 
 632   4          
 633   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE)==_TRUE)
 634   4                    {
 635   5                      #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                              GraphicsPrint(BLUE,"(AC1)");
                              #endif  
 638   5      
 639   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  
 640   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE); 
 641   5                    }
 642   4          
 643   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_AC_MODE)==_TRUE)
 644   4                    {
 645   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
 646   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE); 
 647   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(BLUE,"(AC2)");
                            #endif  
 650   5                    }
 651   4          
 652   4                  }
 653   3            
 654   3          }
 655   2          else
 656   2            {
 657   3              if(GET_AC_PLUG()==_TRUE)
 658   3              {
 659   4                    if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE)==_TRUE)
 660   4                    {
 661   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  
 662   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE); 
 663   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(BLUE,"(AC3)");
                            #endif
 666   5                    }
 667   4          
 668   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_AC_MODE)==_TRUE)
 669   4                    {
 670   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 12  

                            GraphicsPrint(BLUE,"(AC4)");
                            #endif  
 673   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
 674   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE); 
 675   5                    }
 676   4              }
 677   3            }
 678   2                
 679   2            MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE);   
 680   2            break;
 681   2       case _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA:
 682   2      
 683   2          if(GET_DVR_SystemReadyNotic()==_TRUE)          
 684   2           MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
 685   2          
 686   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 687   2           
 688   2        break;
 689   2        case _SYSTEM_TIMER_EVENT_POWER_OFF_ON_DELAY:
 690   2              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                      GraphicsPrint(RED,"(CLR_DVR_PowerOFFDelay)");
                      #endif
 693   2            CLR_DVR_PowerOFFDelay();
 694   2          break;
 695   2          case _SYSTEM_TIMER_EVENT_JUDGE_FIRST_GET_BATT_BTH_STATE:
 696   2            #if (_DEBUG_MESSAGE_BATTERY_TEST)
                    #else
 698   2            BatteryVoltage=GetBatteryVoltage();
 699   2      //      BatteryBTH=GetBatteryBTH()+7;
 700   2            BatteryBTH=GetBatteryBTH();
 701   2            #endif
 702   2      
 703   2            if(BatteryVoltage<=BATTERY_CAPACITY_MIN) //<11.6V
 704   2              BATERY_STAT=_BATT_STATUS_CAPACITY_MIN;
 705   2              else if((BatteryVoltage>BATTERY_CAPACITY_MIN)&&(BatteryVoltage<=BATTERY_CAPACITY_NO_STARTUP))
 706   2                BATERY_STAT=_BATT_STATUS_CAPACITY_NO_STARTUP;       
 707   2              else if((BatteryVoltage>BATTERY_CAPACITY_NO_STARTUP)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL0))
 708   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL0;
 709   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL0)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL1))
 710   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL1;
 711   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL1)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL2))
 712   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL2;
 713   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL2)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL3))
 714   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL3;
 715   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL3)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH))
 716   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 717   2              else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH_STOP)&&(PowerFl
             -ag==ON))
 718   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 719   2              else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=(BATTERY_CAPACITY_HIGH_STOP+9))&&(Pow
             -erFlag==OFF))
 720   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 721   2              else          
 722   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX_STOP;
 723   2      
 724   2            SET_BATTERY_STATE(BATERY_STAT);
 725   2          
 726   2            SET_BATTERY_CAPACITY(BatteryVoltage);
 727   2      
 728   2      
 729   2            if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //High temperature.
 730   2              TEMP_STAT=_BATT_STATUS_TEMP_HIGH;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 13  

 731   2              else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
 732   2                TEMP_STAT=_BATT_STATUS_TEMP_HIGH_WARN;
 733   2              else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
 734   2                TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
 735   2              else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
 736   2                TEMP_STAT=_BATT_STATUS_TEMP_LOW_WARN;
 737   2              else if((BatteryBTH>BTH_TEMP_LOW)&&(BatteryBTH<=BATTERY_ACD_no_battery)) /// if(BatteryBTH>BTH_TEMP_LO
             -W)  //-5~-10 warnning
 738   2                TEMP_STAT=_BATT_STATUS_TEMP_LOW;
 739   2              else{
 740   3                SET_NO_BATTERY();
 741   3                SET_BATTERY_STATE(_BATT_STATUS_NO_BATT);
 742   3                TEMP_STAT=_BATT_STATUS_TEMP_NORMAL; ///no DC12V input
 743   3                }
 744   2      
 745   2              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
 746   2              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
 747   2      
 748   2              SET_BTH_STATE(TEMP_STAT); 
 749   2      
 750   2              STAT1_temp=GET_STAT1(); 
 751   2              if(STAT1_Flag!=STAT1_temp)
 752   2              STAT1_Flag=STAT1_temp;
 753   2                    
 754   2              STAT2_temp=GET_STAT2(); 
 755   2              if(STAT2_Flag!=STAT2_temp)
 756   2              STAT2_Flag=STAT2_temp;        
 757   2      
 758   2            /*
 759   2            if((BatteryBTH<=CHARGE_TEMP_HIGH)&&(BatteryBTH>CHARGE_TEMP_LOW))  
 760   2              {
 761   2              if(GET_AC_PLUG()==_TRUE)  
 762   2                SET_CHARGE_TMEP_ABNORMAL();
 763   2      
 764   2              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
 765   2                    CLR_CHARGE_TMEP_ABNORMAL();
 766   2              }
 767   2            */
 768   2            break;
 769   2          case _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE:  
 770   2      
 771   2          #if (_DEBUG_MESSAGE_BATTERY_TEST)
                  #else
 773   2            BatteryVoltage=GetBatteryVoltage();
 774   2          #endif
 775   2          
 776   2            #if 1
 777   2          SET_BATTERY_CAPACITY(BatteryVoltage);
 778   2            
 779   2      //   if((GET_BATTERY_CAPACITY()<200)||(BatteryBTH>=935)) //no battery  <3.3V
 780   2      //     if(((GET_BATTERY_CAPACITY()<BATTERY_ACD_MIN)||(STAT1_Flag==1))&&(GET_AC_PLUG()==_TRUE)) //no battery
             -  <3.3V
 781   2      /*     if((GET_BATTERY_CAPACITY()<BATTERY_ACD_MIN)&&(GET_AC_PLUG()==_TRUE)) //no battery  <3.3V
 782   2              {
 783   2            SET_NO_BATTERY();
 784   2            SET_BATTERY_STATE(_BATT_STATUS_NO_BATT); 
 785   2              }
 786   2          else 
 787   2          */  
 788   2          {
 789   3            if(GET_NO_BATTERY()==_TRUE)
 790   3              {
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 14  

 791   4              BattDetect1_COUNT=0;
 792   4              BattDetect2_COUNT=0;
 793   4              BattDetect3_COUNT=0;
 794   4              BattDetect4_COUNT=0;
 795   4              BattDetect5_COUNT=0;
 796   4              BattDetectMin_COUNT=0;
 797   4              BattDetectHigh_COUNT=0;
 798   4              BattDetectHighStop_COUNT=0;
 799   4              BattDetectNoStartUp_COUNT=0;
 800   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 801   4              }
 802   3              #if (_DEBUG_MESSAGE_Power_Supply_TEST==ON)
                      CLR_NO_BATTERY(); 
                      #endif
 805   3            if(BatteryVoltage<=BATTERY_CAPACITY_MIN) //<11.6V
 806   3            {
 807   4                  BattDetect1_COUNT=0;
 808   4                  BattDetect2_COUNT=0;
 809   4              BattDetect3_COUNT=0;
 810   4              BattDetect4_COUNT=0;
 811   4              BattDetect5_COUNT=0;              
 812   4              BattDetectMin_COUNT++;
 813   4              BattDetectHigh_COUNT=0;
 814   4              BattDetectHighStop_COUNT=0;
 815   4              BattDetectNoStartUp_COUNT=0;
 816   4            }
 817   3            else if((BatteryVoltage>BATTERY_CAPACITY_MIN)&&(BatteryVoltage<=BATTERY_CAPACITY_NO_STARTUP))
 818   3            {
 819   4            //_BATT_STATUS_CAPACITY_NO_STARTUP
 820   4                  BattDetect1_COUNT=0;
 821   4                  BattDetect2_COUNT=0;
 822   4              BattDetect3_COUNT=0;
 823   4              BattDetect4_COUNT=0;
 824   4              BattDetect5_COUNT=0;              
 825   4              BattDetectMin_COUNT=0;
 826   4              BattDetectHigh_COUNT=0;
 827   4              BattDetectHighStop_COUNT=0;               
 828   4              BattDetectNoStartUp_COUNT++;
 829   4            } 
 830   3            else if((BatteryVoltage>BATTERY_CAPACITY_NO_STARTUP)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL0))
 831   3            {
 832   4            //_BATT_STATUS_CAPACITY_LEVEL0
 833   4                  BattDetect1_COUNT++;
 834   4                  BattDetect2_COUNT=0;
 835   4              BattDetect3_COUNT=0;
 836   4              BattDetect4_COUNT=0;
 837   4              BattDetect5_COUNT=0;              
 838   4              BattDetectMin_COUNT=0;
 839   4              BattDetectHigh_COUNT=0;
 840   4              BattDetectHighStop_COUNT=0;               
 841   4              BattDetectNoStartUp_COUNT=0;
 842   4            }     
 843   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL0)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL1))
 844   3            {
 845   4              // _BATT_STATUS_CAPACITY_LEVEL1
 846   4                BattDetect1_COUNT=0;
 847   4                    BattDetect2_COUNT++;
 848   4              BattDetect3_COUNT=0;
 849   4              BattDetect4_COUNT=0;
 850   4              BattDetect5_COUNT=0;
 851   4              BattDetectMin_COUNT=0;
 852   4              BattDetectHigh_COUNT=0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 15  

 853   4              BattDetectNoStartUp_COUNT=0;
 854   4              
 855   4            }
 856   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL1)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL2))
 857   3            {
 858   4            //_BATT_STATUS_CAPACITY_LEVEL2
 859   4                BattDetect1_COUNT=0;
 860   4                    BattDetect2_COUNT=0;
 861   4              BattDetect3_COUNT++;
 862   4              BattDetect4_COUNT=0;
 863   4              BattDetect5_COUNT=0;
 864   4              BattDetectMin_COUNT=0;
 865   4              BattDetectHigh_COUNT=0;
 866   4              BattDetectHighStop_COUNT=0;
 867   4              BattDetectNoStartUp_COUNT=0;
 868   4              
 869   4            }
 870   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL2)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL3))
 871   3            {
 872   4              //_BATT_STATUS_CAPACITY_LEVEL3
 873   4                BattDetect1_COUNT=0;
 874   4                  BattDetect2_COUNT=0;
 875   4              BattDetect3_COUNT=0;
 876   4              BattDetect4_COUNT++;
 877   4              BattDetect5_COUNT=0;
 878   4              BattDetectMin_COUNT=0;
 879   4              BattDetectHigh_COUNT=0;
 880   4              BattDetectHighStop_COUNT=0;
 881   4              BattDetectNoStartUp_COUNT=0;
 882   4              
 883   4            }
 884   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL4)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH))
 885   3            {
 886   4              //_BATT_STATUS_CAPACITY_LEVEL4
 887   4                BattDetect1_COUNT=0;
 888   4              BattDetect2_COUNT=0;
 889   4              BattDetect3_COUNT=0;
 890   4              BattDetect4_COUNT=0;
 891   4              BattDetect5_COUNT++;
 892   4              BattDetectMin_COUNT=0;
 893   4              BattDetectHigh_COUNT=0;
 894   4              BattDetectHighStop_COUNT=0;
 895   4              BattDetectNoStartUp_COUNT=0;
 896   4              
 897   4          
 898   4            }
 899   3            else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH_STOP)&&(PowerFla
             -g==ON))      
 900   3            {
 901   4              BattDetect1_COUNT=0;
 902   4              BattDetect2_COUNT=0;
 903   4              BattDetect3_COUNT=0;
 904   4              BattDetect4_COUNT=0;
 905   4              BattDetect5_COUNT=0;
 906   4              BattDetectMin_COUNT=0;
 907   4              BattDetectHigh_COUNT++; 
 908   4              BattDetectHighStop_COUNT=0;
 909   4              BattDetectNoStartUp_COUNT=0;
 910   4              
 911   4            }
 912   3            else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=(BATTERY_CAPACITY_HIGH_STOP+9))&&(Powe
             -rFlag==OFF))      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 16  

 913   3            {
 914   4              BattDetect1_COUNT=0;
 915   4              BattDetect2_COUNT=0;
 916   4              BattDetect3_COUNT=0;
 917   4              BattDetect4_COUNT=0;
 918   4              BattDetect5_COUNT=0;
 919   4              BattDetectMin_COUNT=0;
 920   4              BattDetectHigh_COUNT++; 
 921   4              BattDetectHighStop_COUNT=0;
 922   4              BattDetectNoStartUp_COUNT=0;
 923   4              
 924   4            }
 925   3            else///>BATTERY_CAPACITY_HIGH_STOP
 926   3            {
 927   4              BattDetect1_COUNT=0;
 928   4              BattDetect2_COUNT=0;
 929   4              BattDetect3_COUNT=0;
 930   4              BattDetect4_COUNT=0;
 931   4              BattDetect5_COUNT=0;
 932   4              BattDetectMin_COUNT=0;
 933   4              BattDetectHigh_COUNT=0; 
 934   4              BattDetectHighStop_COUNT++;
 935   4              BattDetectNoStartUp_COUNT=0;
 936   4            }
 937   3      
 938   3            if(BatteryVoltage>=BATTERY_CAPACITY_STARTUP)
 939   3            BattDetectStartUp_COUNT++;
 940   3            else    
 941   3            BattDetectStartUp_COUNT=0;
 942   3            
 943   3            if(BattDetect1_COUNT==20)
 944   3            {
 945   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL0;
 946   4              BattDetect1_COUNT=0;
 947   4            }
 948   3            if(BattDetect2_COUNT==20)
 949   3            {
 950   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL1;
 951   4              BattDetect2_COUNT=0;
 952   4            }
 953   3            if(BattDetect3_COUNT==20)
 954   3            {
 955   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL2;
 956   4              BattDetect3_COUNT=0;
 957   4            }
 958   3            if(BattDetect4_COUNT==20)
 959   3            {
 960   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL3;
 961   4              BattDetect4_COUNT=0;
 962   4            }
 963   3            if(BattDetect5_COUNT==20)
 964   3            {
 965   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 966   4              BattDetect5_COUNT=0;
 967   4            }
 968   3      
 969   3            if(BattDetectMin_COUNT==20)
 970   3            {
 971   4            BATERY_STAT=_BATT_STATUS_CAPACITY_MIN;
 972   4            BattDetectMin_COUNT=0;
 973   4            }
 974   3            
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 17  

 975   3            if(BattDetectHigh_COUNT==20)
 976   3            {
 977   4            BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 978   4            BattDetectHigh_COUNT=0;
 979   4            }
 980   3      
 981   3            if(BattDetectNoStartUp_COUNT==20)
 982   3            {
 983   4            BATERY_STAT=_BATT_STATUS_CAPACITY_NO_STARTUP;
 984   4            BattDetectNoStartUp_COUNT=0;
 985   4            }
 986   3      
 987   3                if(BattDetectHigh_COUNT==20)
 988   3                {
 989   4                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 990   4                BattDetectHigh_COUNT=0;
 991   4                }
 992   3      
 993   3              if(BattDetectHighStop_COUNT==20)
 994   3              {
 995   4              BATERY_STAT=_BATT_STATUS_CAPACITY_MAX_STOP;
 996   4              BattDetectHighStop_COUNT=0;
 997   4              }
 998   3      
 999   3              if(BATERY_STAT_TEMP!=BATERY_STAT)
1000   3              {
1001   4              BATERY_STAT_TEMP=BATERY_STAT;
1002   4              SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state. 
1003   4              }
1004   3      
1005   3            if(BattDetectStartUp_COUNT==20)
1006   3            { 
1007   4              if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1008   4                {
1009   5                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                         GraphicsPrint(RED,"(Normal Voltage Charge >12.5V)");
                        #endif
1012   5                CLR_BATTERY_CAPACITY_LOW_FLAG();
1013   5                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1014   5      
1015   5                  if(ReadEEP(EEP_LowBattery_Flag))
1016   5                    WriteEEP(EEP_LowBattery_Flag,OFF);
1017   5                }
1018   4              
1019   4            BattDetectStartUp_COUNT=0;
1020   4            }
1021   3      
1022   3            SET_BATTERY_STATE(BATERY_STAT);
1023   3        }
1024   2          //#if (_DEBUG_MESSAGE_SysTimerEvent==ON)
1025   2          //GraphicsPrint(CYAN,">");
1026   2          //#endif
1027   2              if(PowerFlag==OFF)
1028   2              MCUTimerActiveTimerEvent(SEC(0.1/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
1029   2              else
1030   2          MCUTimerActiveTimerEvent(SEC(0.3/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
1031   2            #else
                    SET_BATTERY_CAPACITY(BatteryVoltage);
                
                      
                     if((GET_BATTERY_CAPACITY()<200)||(BatteryBTH>=935)) //no battery  <3.3V
                      {
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 18  

                    SET_NO_BATTERY();
                    SET_BATTERY_STATE(_BATT_STATUS_NO_BATT); 
                      }
                  else 
                    {
                    CLR_NO_BATTERY();   
                    
                  if(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVEL0)//<12V
                       SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL0);        
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL0)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L1))//12V-13.5V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL1);      
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL1)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L2))//14.2V-13.5V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL2);
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL2)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L3))//15V-14.2V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL3);  
                  else    
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL4);//>15V
                    }   
              
                  MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
              
                  #endif
1059   2      
1060   2          break;
1061   2      
1062   2          case _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE:
1063   2          #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
                  GraphicsPrint(CYAN,"\r\nPOWER key pressed");
                  #endif
1066   2      
1067   2            if(GET_DVR_EntrySleepMode()==_TRUE)
1068   2            {
1069   3              SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1070   3              //CLR_DVR_EntrySleepMode();
1071   3              //MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SLEEP_WAKE_UP);
1072   3              #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
                        GraphicsPrint(YELLOW,"(MCU_SLEEP_TO_NORMAL_MODE)");    
                      #endif        
1075   3      
1076   3            }
1077   2            #if 0 //for test
                    else if(PowerFlag==ON)    
                      {
                    MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
                    PowerFlag=OFF;
                    WriteEEP(EEP_Powerflag,PowerFlag);
                      }
                    #else
1085   2            else if(PowerFlag==ON)    
1086   2            MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1087   2            #endif
1088   2            else
1089   2            {
1090   3                if(GET_DVR_PowerOFFDelay()==_FALSE)
1091   3                {
1092   4                  if((GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)||(GET_AC_PLUG()==_TRUE))
1093   4                  {
1094   5                  PowerFlag=ON;
1095   5                  WriteEEP(EEP_Powerflag,PowerFlag);
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 19  

1096   5                  }
1097   4                  else
1098   4                    {
1099   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(RED,"\r\n(Battery voltage low <12.5V...)");
                            #endif
1102   5                    MCUTimerActiveTimerEvent(SEC(0.01), _SYSTEM_TIMER_EVENT_BATT_LOW_RED_BLINK);
1103   5                    }
1104   4                  
1105   4                #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
                        if(PWR_START_flag==ON)
                            GraphicsPrint(YELLOW,"(DC12V to Power on)");    
                        #endif
1109   4                }
1110   3                else
1111   3                MCUTimerActiveTimerEvent(SEC(3), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);
1112   3                
1113   3            }
1114   2          
1115   2            break;
1116   2      case _SYSTEM_TIMER_EVENT_BATTERY_LOW_PWR_OFF:
1117   2           if(PowerFlag==ON)  
1118   2          MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1119   2        break;
1120   2          case _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE:
1121   2        
1122   2          #if (_DEBUG_MESSAGE_BATTERY_TEST)
                  #else
1124   2          BatteryBTH=GetBatteryBTH();
1125   2      
1126   2      //    if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1127   2      //      BatteryBTH=549;
1128   2          #endif
1129   2          
1130   2          //if((GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_STOP_CHARGE)&&(GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)
             -)
1131   2          //SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);
1132   2          //else
1133   2          //{
1134   2      
1135   2          #if 1
1136   2          if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //<11.6V
1137   2            {     
1138   3            TEMP_NORMAL_COUNT=0;
1139   3              TEMP_LOW_COUNT=0;
1140   3            TEMP_LOW_WARN_COUNT=0;
1141   3            TEMP_HIGH_COUNT++;
1142   3            TEMP_HIGH_WARN_COUNT=0;
1143   3            }
1144   2            else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
1145   2            {
1146   3            TEMP_NORMAL_COUNT=0;
1147   3              TEMP_LOW_COUNT=0;
1148   3            TEMP_LOW_WARN_COUNT=0;
1149   3            TEMP_HIGH_COUNT=0;
1150   3            TEMP_HIGH_WARN_COUNT++;
1151   3            }   
1152   2            else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
1153   2            {
1154   3            TEMP_NORMAL_COUNT++;
1155   3            TEMP_LOW_COUNT=0;
1156   3            TEMP_LOW_WARN_COUNT=0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 20  

1157   3            TEMP_HIGH_COUNT=0;
1158   3            TEMP_HIGH_WARN_COUNT=0;
1159   3            }
1160   2            else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
1161   2              {
1162   3              TEMP_NORMAL_COUNT=0;
1163   3              TEMP_LOW_COUNT=0;
1164   3              TEMP_LOW_WARN_COUNT++;
1165   3              TEMP_HIGH_COUNT=0;
1166   3              TEMP_HIGH_WARN_COUNT=0;
1167   3      
1168   3              }
1169   2            else if((BatteryBTH>BTH_TEMP_LOW)&&(BatteryBTH<=BATTERY_ACD_no_battery))  //-5~-10 warnning
1170   2              {
1171   3              TEMP_NORMAL_COUNT=0;
1172   3              TEMP_LOW_COUNT++;
1173   3              TEMP_LOW_WARN_COUNT=0;
1174   3              TEMP_HIGH_COUNT=0;
1175   3              TEMP_HIGH_WARN_COUNT=0;
1176   3              }
1177   2            else
1178   2              {
1179   3              #if (_DEBUG_MESSAGE_Power_Supply_TEST==ON)
                      #else
1181   3              SET_NO_BATTERY();
1182   3              SET_BATTERY_STATE(_BATT_STATUS_NO_BATT);
1183   3              #endif
1184   3              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL; ///no DC12V input
1185   3            TEMP_NORMAL_COUNT=0;
1186   3              TEMP_LOW_COUNT=0;
1187   3            TEMP_LOW_WARN_COUNT=0;
1188   3            TEMP_HIGH_COUNT=0;
1189   3            TEMP_HIGH_WARN_COUNT=0;         
1190   3              }
1191   2      
1192   2          if(((TEMP_NORMAL_COUNT>3)||(TEMP_LOW_COUNT>3)||(TEMP_LOW_WARN_COUNT>3)||(TEMP_HIGH_COUNT>3)||(TEMP_HIGH_
             -WARN_COUNT>3)\
1193   2            )&&(PWR_START_flag==ON)&&(PowerFlag==OFF)&&(GET_NO_BATTERY()==_TRUE))
1194   2          PowerFlag=ON;
1195   2      
1196   2            
1197   2          if(TEMP_HIGH_COUNT==TempADC_Counts)
1198   2          {
1199   3            TEMP_STAT=_BATT_STATUS_TEMP_HIGH;
1200   3            TEMP_HIGH_COUNT=0;
1201   3            CLR_BATTERY_HIGH_TMEP_WARN();
1202   3            CLR_BATTERY_LOW_TMEP_WARN();  
1203   3            CLR_NO_BATTERY();
1204   3          }
1205   2      
1206   2          if(TEMP_HIGH_WARN_COUNT==TempADC_Counts)
1207   2          {
1208   3            TEMP_STAT=_BATT_STATUS_TEMP_HIGH_WARN;
1209   3            TEMP_HIGH_WARN_COUNT=0;
1210   3            SET_BATTERY_HIGH_TMEP_WARN();
1211   3            CLR_BATTERY_LOW_TMEP_WARN();
1212   3            CLR_NO_BATTERY();   
1213   3          }
1214   2      
1215   2          if(TEMP_NORMAL_COUNT==TempADC_Counts)
1216   2          {
1217   3            TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 21  

1218   3            TEMP_NORMAL_COUNT=0;
1219   3            CLR_BATTERY_LOW_TMEP_WARN();
1220   3            CLR_BATTERY_HIGH_TMEP_WARN();
1221   3            CLR_NO_BATTERY();   
1222   3          }
1223   2      
1224   2          if(TEMP_LOW_WARN_COUNT==TempADC_Counts)
1225   2          {
1226   3            TEMP_STAT=_BATT_STATUS_TEMP_LOW_WARN;
1227   3            TEMP_LOW_WARN_COUNT=0;
1228   3            SET_BATTERY_LOW_TMEP_WARN();
1229   3            CLR_BATTERY_HIGH_TMEP_WARN();
1230   3            CLR_NO_BATTERY();     
1231   3          }
1232   2      
1233   2          if(TEMP_LOW_COUNT==TempADC_Counts)
1234   2          {
1235   3            TEMP_STAT=_BATT_STATUS_TEMP_LOW;
1236   3            TEMP_LOW_COUNT=0;
1237   3            CLR_BATTERY_LOW_TMEP_WARN();
1238   3            CLR_BATTERY_HIGH_TMEP_WARN(); 
1239   3            CLR_NO_BATTERY();   
1240   3          }
1241   2      /*
1242   2          if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1243   2            {
1244   2              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
1245   2              CLR_BATTERY_LOW_TMEP_WARN();
1246   2              CLR_BATTERY_HIGH_TMEP_WARN();
1247   2      
1248   2            }
1249   2          */
1250   2          SET_BTH_STATE(TEMP_STAT);
1251   2      
1252   2      
1253   2            if((BatteryBTH<=CHARGE_TEMP_HIGH)||(BatteryBTH>CHARGE_TEMP_LOW))  
1254   2              {
1255   3              CHARGE_TEMP_ABNORMAL++;
1256   3              CHARGE_TEMP_NORMAL=0;
1257   3              }
1258   2              else
1259   2              {
1260   3              CHARGE_TEMP_ABNORMAL=0;
1261   3              CHARGE_TEMP_NORMAL++;
1262   3              //CLR_CHARGE_TMEP_ABNORMAL();
1263   3              }
1264   2              
1265   2              if(CHARGE_TEMP_ABNORMAL==TempADC_Counts)
1266   2                {
1267   3                CHARGE_TEMP_ABNORMAL=0;
1268   3                  if((GET_AC_PLUG()==_TRUE)&&(GET_NO_BATTERY()==_FALSE))      
1269   3                  SET_CHARGE_TMEP_ABNORMAL();
1270   3                
1271   3                //  if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
1272   3                //    CLR_CHARGE_TMEP_ABNORMAL();                     
1273   3                }
1274   2              else  if(CHARGE_TEMP_NORMAL==TempADC_Counts)
1275   2                {
1276   3                CHARGE_TEMP_NORMAL=0;
1277   3                CLR_CHARGE_TMEP_ABNORMAL();
1278   3                }
1279   2          #else
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 22  

                      if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //>55
                      SET_BTH_STATE(_BATT_STATUS_TEMP_HIGH);          
                    else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
                      {
                      SET_BATTERY_HIGH_TMEP_WARN();   
                      CLR_BATTERY_LOW_TMEP_WARN();  
                      }
                    else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
                      {
                      SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);        
                      CLR_BATTERY_LOW_TMEP_WARN();
                      CLR_BATTERY_HIGH_TMEP_WARN();
                      }
                    else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
                      {
                      //SET_BATTERY_LOW_TMEP_WARN();
                      //CLR_BATTERY_HIGH_TMEP_WARN(); 
                      }
                    else if(BatteryBTH>BTH_TEMP_LOW)  //-5~-10 warnning
                      {
                      SET_BTH_STATE(_BATT_STATUS_TEMP_LOW);       
                      CLR_BATTERY_LOW_TMEP_WARN();
                      CLR_BATTERY_HIGH_TMEP_WARN();
                      }
                    else 
                      SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);
                    
              
                    #endif  
1309   2          //}
1310   2            if(PowerFlag==OFF)
1311   2              MCUTimerActiveTimerEvent(SEC(0.1/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
1312   2              else
1313   2          MCUTimerActiveTimerEvent(SEC(0.2/*0.3*//*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
1314   2          break;
1315   2      
1316   2          case _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO:
1317   2      
1318   2      
1319   2            if(GET_DVR_WDTkickDisable()==_FALSE)
1320   2            {
1321   3            #if(_DEBUG_MESSAGE_WDT_KICK_CHECK == ON)    
                    GraphicsPrint(RED,"\r\n(WDT kick over 10 seconds, Try to reboot the DVR)"); 
                    #endif
1324   3            SET_DVR_Reboot();
1325   3            SET_DVR_RebootAndPower();
1326   3            MCUTimerActiveTimerEvent(SEC(1), _USER_TIMER_EVENT_OSD_DVR_REBOOT);
1327   3            }
1328   2          break;
1329   2      
1330   2          case _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE:
1331   2          
1332   2              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                      GraphicsPrint(CYAN,"(AC)");
                      if(GET_STAT1()==ON)
                        GraphicsPrint(GREEN,"(S1=1)");
                      else
                        GraphicsPrint(GREEN,"(S1=0)");
                      
                      if(GET_STAT2()==ON)
                        GraphicsPrint(MAGENTA,"(S2=1)");
                      else
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 23  

                        GraphicsPrint(MAGENTA,"(S2=0)");
                        
                      #endif
1345   2              
1346   2                  if(Check_ADAP_IN()==_TRUE)
1347   2                  {
1348   3                    if(GET_AC_PLUG()!=_TRUE)
1349   3                    {
1350   4                      SET_AC_PLUG();
1351   4                      //SET_AC_MODE();  // turn on AC mode
1352   4                      CLR_AC_MODE();  // turn on AC mode
1353   4                      //MCUTimerDelayXms(100);//delay 50ms    
1354   4                      CLR_BAT_SYS();// turn off battery output              
1355   4                      //SET_PWM(_CHG_CURR,Low_Current);
1356   4      
1357   4                      STAT1_temp=GET_STAT1(); 
1358   4                      if(STAT1_Flag!=STAT1_temp)
1359   4                      STAT1_Flag=STAT1_temp;
1360   4                      
1361   4                      STAT2_temp=GET_STAT2(); 
1362   4                      if(STAT2_Flag!=STAT2_temp)
1363   4                      STAT2_Flag=STAT2_temp;
1364   4      
1365   4                    }         
1366   3                  
1367   3                  if(GET_NO_BATTERY()==_TRUE)
1368   3                    {
1369   4                  MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT);                
1370   4                    }
1371   3                  else
1372   3                    {
1373   4                    
1374   4                  if(GET_POWER_STATUS()==_POWER_STATUS_NORMAL)
1375   4                  {
1376   5                    
1377   5                    if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_BA
             -TTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1378   5                      {
1379   6                        if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1380   6                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE);                   
1381   6                        else
1382   6                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);  
1383   6                      }
1384   5                    else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1385   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1386   5                    else
1387   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);   
1388   5                  }
1389   4                  else if(GET_POWER_STATUS()==_POWER_STATUS_SAVING)
1390   4                    {
1391   5                    
1392   5                    if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_BA
             -TTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1393   5                      {
1394   6                      if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1395   6                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE);                   
1396   6                      else
1397   6                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);
1398   6                      }
1399   5                      else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1400   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1401   5                      else
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 24  

1402   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE); 
1403   5                    }
1404   4                  else if(GET_POWER_STATUS()==_POWER_STATUS_OFF)
1405   4                    {
1406   5                      
1407   5                      if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_B
             -ATTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1408   5                        {
1409   6                        if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1410   6                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE); 
1411   6                        else
1412   6                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);  
1413   6                        }
1414   5                      else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1415   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1416   5                      else
1417   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE); 
1418   5                    }
1419   4                          
1420   4                  
1421   4                    }
1422   3                
1423   3                  MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);   //repeat on AC mode
1424   3      
1425   3      
1426   3                  }
1427   2                else
1428   2                  {
1429   3                  CLR_AC_PLUG();
1430   3                  CLR_AC_MODE();  // turn off AC mode
1431   3                  SET_AC_PLUG_OUT();
1432   3                  CLR_BATTERY_CAPACITY_HIGH_FLAG(); 
1433   3                  if((PWR_START_flag==ON)&&(PowerFlag==ON))
1434   3                  MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN);///SET_AC_PLUG_OUT             
1435   3                  MCUTimerActiveTimerEvent(SEC(0.5), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);  //change battery mode          
1436   3                  MCUTimerActiveTimerEvent(SEC(0.5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  //going to battery mode
1437   3                  }
1438   2      
1439   2                CLR_AC_MODE();  
1440   2                    CLR_BAT_SYS();
1441   2          break;
1442   2                      case _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE:
1443   2      
1444   2                    STAT1_temp=GET_STAT1();
1445   2                    STAT2_temp=GET_STAT2();
1446   2                  
1447   2                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(YELLOW,"(STAT1_temp=%02x)",(WORD)STAT1_temp);
                            #endif  
1450   2                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(GREEN,"(STAT2_temp=%02x)",(WORD)STAT2_temp);
                            #endif  
1453   2                    
1454   2                    if((STAT1_Flag!=STAT1_temp)&&(GET_NO_BATTERY()==_FALSE))
1455   2                      {
1456   3                      STAT1_Flag=STAT1_temp;
1457   3                      SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.              
1458   3                      }
1459   2                    
1460   2                      if((STAT2_Flag!=STAT2_temp)&&(GET_NO_BATTERY()==_FALSE))
1461   2                      {
1462   3                      STAT2_Flag=STAT2_temp;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 25  

1463   3                      SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.              
1464   3                      }
1465   2            
1466   2                #if 1
1467   2                    if(GET_BATTERY_ABNORMAL()==_FALSE)
1468   2                    { 
1469   3                        if(GET_BATTERY_CAPACITY()>=BATTERY_ACD_MAX)//>17    
1470   3                        {
1471   4                        #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"( HigH Voltage >17V shut down)");
                                #endif
1474   4                        SET_BATTERY_ABNORMAL();
1475   4                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
1476   4                        }
1477   3                  
1478   3                    }
1479   2      
1480   2                        switch(GET_BATTERY_STATE())
1481   2                        {
1482   3      
1483   3                      case _BATT_STATUS_CAPACITY_MAX_STOP:
1484   3                        
1485   3                          if(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)
1486   3                          {
1487   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                  GraphicsPrint(RED,"(HIGH Voltage >16.4V stop charge)");
                                  #endif  
1490   4                          SET_BATTERY_CAPACITY_HIGH_FLAG();   
1491   4                          }
1492   3                          
1493   3                         if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1494   3                         {     
1495   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                   GraphicsPrint(RED,"(2.Normal Voltage Charge >12V)");
                                  #endif
1498   4                         CLR_BATTERY_CAPACITY_LOW_FLAG();  
1499   4                         SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1500   4                          if(ReadEEP(EEP_LowBattery_Flag))
1501   4                            WriteEEP(EEP_LowBattery_Flag,OFF);
1502   4                         }
1503   3                         CLR_CHARGE_START_FLAG();
1504   3                        break;
1505   3                      case _BATT_STATUS_CAPACITY_MIN:
1506   3                      case _BATT_STATUS_CAPACITY_NO_STARTUP:
1507   3                          if((GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)&&(GET_DVR_SystemReadyNotic()==_FALSE)&&(GET_AC_PLUG
             -()==_FALSE))
1508   3                          {
1509   4                          SET_BATTERY_CAPACITY_LOW_FLAG();  
1510   4                          
1511   4                          if(ReadEEP(EEP_LowBattery_Flag)==OFF)
1512   4                          WriteEEP(EEP_LowBattery_Flag,ON);
1513   4                          
1514   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                  GraphicsPrint(RED,"( Low Voltage <11.8V or < 11.6V shut down)");
                                  #endif  
1517   4                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);  
1518   4                          }
1519   3                          else  if((GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)&&(PowerFlag==ON)&&(GET_AC_PLUG()==_FALS
             -E))
1520   3                          {
1521   4                          PowerFlag=OFF;
1522   4                          WriteEEP(EEP_Powerflag,PowerFlag);
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 26  

1523   4                        
1524   4                          if(GET_DVR_EntrySleepMode()==TRUE)
1525   4                          CLR_DVR_EntrySleepMode();
1526   4                          }
1527   3      
1528   3                          if(GET_DVR_EntrySleepMode()==_TRUE)
1529   3                          {
1530   4                          SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1531   4                          #if (_DEBUG_MESSAGE_SysTimerEvent==ON)
                                    GraphicsPrint(RED,"(MCU_SLEEP_TO_NORMAL_MODE: Low Voltage <12V)");    
                                  #endif  
1534   4                          }
1535   3                          
1536   3                          CLR_BATTERY_CAPACITY_HIGH_FLAG();       
1537   3                          SET_CHARGE_START_FLAG();
1538   3                        break;
1539   3      
1540   3                       case _BATT_STATUS_CAPACITY_LEVEL0:
1541   3                         CLR_BATTERY_CAPACITY_HIGH_FLAG();   
1542   3                        //  CLR_BATTERY_CAPACITY_LOW_FLAG();  
1543   3                          if(GET_DVR_EntrySleepMode()==_TRUE)
1544   3                          {
1545   4                          SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1546   4                          #if (_DEBUG_MESSAGE_SysTimerEvent==ON)
                                    GraphicsPrint(RED,"(MCU_SLEEP_TO_NORMAL_MODE: Low Voltage <12V)");    
                                  #endif  
1549   4                          }
1550   3                        break;
1551   3                       case _BATT_STATUS_CAPACITY_LEVEL1:                 
1552   3                       case _BATT_STATUS_CAPACITY_LEVEL2:
1553   3                       case _BATT_STATUS_CAPACITY_LEVEL3:
1554   3                       case _BATT_STATUS_CAPACITY_LEVEL4:
1555   3                       case _BATT_STATUS_CAPACITY_MAX:
1556   3      
1557   3                         SET_CHARGE_START_FLAG();
1558   3                         /*
1559   3                         if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1560   3                         {     
1561   3                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1562   3                           GraphicsPrint(RED,"(Normal Voltage Charge >12V)");
1563   3                          #endif
1564   3                         CLR_BATTERY_CAPACITY_LOW_FLAG();  
1565   3                         SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1566   3                         }  
1567   3                         */
1568   3                         CLR_BATTERY_CAPACITY_HIGH_FLAG();   
1569   3                          break;
1570   3                      //case _BATT_STATUS_CAPACITY_MAX:
1571   3                      //  CLR_CHARGE_START_FLAG();
1572   3                        
1573   3                        //break;
1574   3                        }
1575   2            #else
                            if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
                            { 
                              if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)//<11.6V    
                              {
                              SET_BATTERY_CAPACITY_LOW_FLAG();                                      
                              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                              GraphicsPrint(RED,"( Low Voltage <11.6V shut down)");
                              #endif                                      
                              MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 27  

                              }             
                              
                            }
              
                
                            if(GET_BATTERY_ABNORMAL()==_FALSE)
                            { 
                                if(GET_BATTERY_CAPACITY()>=BATTERY_ACD_MAX)//>17    
                                {
                                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"( HigH Voltage >17V shut down)");
                                #endif
                                SET_BATTERY_ABNORMAL();
                                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
                                }
                          
                            }
                      //}
              
                              if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
                              {   
                                if(GET_BATTERY_STATE()!=_BATT_STATUS_CAPACITY_MIN)//<11.6V    
                                {
                                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"(Normal Voltage Charge >12V)");
                                #endif
                                CLR_BATTERY_CAPACITY_LOW_FLAG();  
                                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
                                }         
                              }
                          //  if(((GET_BATTERY_CAPACITY()>675)||(GET_BATTERY_CAPACITY()<1023))&&(GET_BATTERY_ABNORMAL()==_TRUE)
             -)    
                            //      CLR_BATTERY_ABNORMAL();
              
                            if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)//>16.4V
                            {
                                  if(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)
                                  {
                                  #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                  GraphicsPrint(RED,"(HIGH Voltage >15.5V stop charge)");
                                  #endif  
                                  SET_BATTERY_CAPACITY_HIGH_FLAG();   
                                  //SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
                                  }
                                  
                            }
                            else
                              CLR_BATTERY_CAPACITY_HIGH_FLAG(); 
                            
                    #endif        
1634   2                MCUTimerActiveTimerEvent(SEC(10-5), _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE);  //check charge
1635   2                break;
1636   2          case     _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE:
1637   2            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                    GraphicsPrint(CYAN,"(BATT)");
                      if(GET_STAT1()==ON)
                        GraphicsPrint(MAGENTA,"(S1=1)");
                      else
                        GraphicsPrint(GREEN,"(S1=0)");
                      
                      if(GET_STAT2()==ON)
                        GraphicsPrint(MAGENTA,"(S2=1)");
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 28  

                      else
                        GraphicsPrint(GREEN,"(S2=0)");
                    #endif
1649   2          
1650   2            if(Check_ADAP_IN()==_TRUE)
1651   2              {
1652   3      
1653   3                if((PWR_START_flag==ON)&&(PowerFlag==OFF))
1654   3                {
1655   4                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);
1656   4                }
1657   3      
1658   3              SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
1659   3              MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
1660   3              }
1661   2            else 
1662   2              {
1663   3              if(GET_BAT_SYS()!=ON)
1664   3                {
1665   4                //SET_BAT_SYS();   // turn on  battery mode
1666   4                CLR_BAT_SYS();   // turn on  battery mode
1667   4                //MCUTimerDelayXms(100);//delay 50ms          
1668   4                CLR_AC_MODE();  // turn off AC mode
1669   4                }
1670   3      
1671   3                //if((GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)&&(PowerFlag==ON))
1672   3                //MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1673   3      
1674   3                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);       
1675   3      
1676   3      
1677   3              MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);
1678   3              }
1679   2      
1680   2                CLR_AC_MODE();  
1681   2                    CLR_BAT_SYS();
1682   2            break;
1683   2      
1684   2            case _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE: 
1685   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_LOW_CHARGE)
1686   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_LOW_CHARGE);
1687   2          break;
1688   2      
1689   2        case  _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE:   
1690   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_HIGH_CHARGE)
1691   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_HIGH_CHARGE);         
1692   2              break;
1693   2        case  _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE:   
1694   2            if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_NORMAL_CHARGE)
1695   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_NORMAL_CHARGE);             
1696   2            break;
1697   2      
1698   2        case  _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE:   
1699   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_STOP_CHARGE)
1700   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_STOP_CHARGE);         
1701   2            break;
1702   2      
1703   2      
1704   2        case  _SYSTEM_TIMER_EVENT_NO_BATT:  
1705   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_NO_BATT)
1706   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_NO_BATT);         
1707   2              break;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          02/22/2021 17:15:59 PAGE 29  

1708   2            
1709   2      
1710   2              case _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER:
1711   2        
1712   2            second+=10;
1713   2          
1714   2            if(second==60)
1715   2            {
1716   3              second=0;
1717   3              minute++;
1718   3            }
1719   2        
1720   2            if(minute==60)
1721   2            {
1722   3              minute=0;
1723   3              hour++;
1724   3            }
1725   2        
1726   2            if(hour==24)
1727   2            {
1728   3              hour=0;
1729   3              day++;
1730   3            } 
1731   2      
1732   2          ShowWorkingTimer();
1733   2      
1734   2          MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);
1735   2             break;
1736   2      #if (_POWER_DOWN_ENABLE==ON)
1737   2          case _SYSTEM_TIMER_POWER_DOWN_MODE:
1738   2          //SET_MCU_POWER_DOWN_MODE();
1739   2          Power_down_mode=2;
1740   2              
1741   2          break;
1742   2      #endif
1743   2         default:
1744   2                  break;
1745   2       }
1746   1      }
1747          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5041    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     92      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CPU
OBJECT MODULE PLACED IN .\Output\CPU.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CPU.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\CPU.lst) TABS(2) OBJECT(.\Output\CPU.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  CPU.c                                                                               */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          #include<intrins.h>       ///_nop_(); 
   9          #include "config.h"
  10          #include "typedefs.h"
  11          #include "reg.h"
  12          #include "cpu.h"
  13          #include "main.h"
  14          #include "I2C.h"
  15          #include "Printf.h"
  16          #include "etc_eep.h"
  17          #include <math.h>
  18          #include "main.h"
  19          
  20          
  21          extern WORD g_usTimerCounter ;  
  22          extern StructPowerInfoType idata g_stPowerInfo;
  23          extern  BYTE DebugLevel;
  24          extern bit g_bNotifyTimer0Int;
  25          extern StructBatteryInfoType g_stBatteryInfo;
  26          extern WORD BatteryBTH;
  27          extern StructBatteryInfoType g_stBatteryInfo ;
  28          extern BYTE PowerFlag;
  29          extern BYTE Power_down_mode;
  30          extern BYTE DVRChangeCurrent;
  31          
  32          BYTE   year1=0,year2=0,month=0,day=0,hour=0,minute=0,second=0;
  33          BYTE DVR_FACTORY_MODE=0;
  34          BYTE IE_Temp=0;
  35          //===================== Timer =================================================
  36              DATA WORD keytic=0;
  37              DATA BYTE Key=0;
  38              bit KeyReady=0, RepeatKey = ON;
  39          
  40              DATA BYTE tm001;
  41              DATA  WORD  stopWatch;
  42              DATA  WORD  tm01=0;
  43              DATA  BYTE  tic01=0,tic02=0;  //, tic_pc;
  44              DATA  WORD  tic_pc=0;
  45              DATA  DWORD tic_PWR_SAVING=0;
  46              DATA  DWORD tic_Init_time=0;
  47             volatile bit PWR_SAVING_ACT_FLAG=0;
  48              extern BYTE Power_Saving_Flag;
  49              extern bit PWR_OFF_KEY_LOCK;
  50              DATA DWORD  SystemClock;      //00:00
  51              BYTE FormatSDCard=1;
  52          
  53          #ifdef SERIAL //=======================================================================
  54          
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 2   

  55          
  56          
  57          
  58          static  DATA BYTE RS_buf[BUF_MAX];
  59               //     DATA BYTE     RS_buf2[BUF_MAX];
  60              DATA BYTE DVR_buf[DVR_BUF_MAX];
  61          
  62              
  63              DATA BYTE   RS_in, RS_out=0;
  64              DATA BYTE   RS2_in=0,RS2_out=0;
  65              bit         RS_Xbusy=0;     // bit RS_Xbusy=0;
  66              bit     RS2_Xbusy=0;    // bit RS_Xbusy=0;
  67              
  68          
  69          #endif  // SERIAL ======================================================================
  70          
  71          BYTE  keyticSec=0;
  72          BYTE  FormatWait=0;
  73          BYTE  PowerDownWait=0;
  74          BYTE  updn_reg[4]={0,0,0,0};
  75          
  76          bit ChangeKey;
  77          BYTE Time5ms;
  78          //BYTE FLASH_FLAG;
  79          WORD LED_FLASH_COUNT,Power_Msg_Count;
  80          short EncorderCount=0;
  81          
  82          extern BYTE   KeyBuffer;
  83          
  84          //=============================================================================
  85          //    Main Initialize Routine
  86          //=============================================================================
  87          void main_init (void)
  88          {
  89   1        DWORD rev;
  90   1      
  91   1        rev = GetFWRevEE();
  92   1      
  93   1      
  94   1        Printf("\r\nPrev.FW:%02x%02x%02x", (WORD) ReadEEP(EEP_FWREV_MAJOR), (WORD) ReadEEP(EEP_FWREV_MINOR1), (WO
             -RD) ReadEEP(EEP_FWREV_MINOR2));
  95   1      
  96   1      if( GetFWRevEE()!=((MCU_FW_Major<<16)|(MCU_FW_Sub0<<8)|(MCU_FW_Sub1)))
  97   1          {
  98   2          Printf("\r\nCurr.FW:%02x%02x%02x",(WORD) MCU_FW_Major,(WORD) MCU_FW_Sub0,(WORD) MCU_FW_Sub1);
  99   2          SaveFWRevEE();
 100   2          Printf("\r\nCurr.FW:%02x%02x%02x",(WORD) ReadEEP(EEP_FWREV_MAJOR), (WORD) ReadEEP(EEP_FWREV_MINOR1), (WO
             -RD) ReadEEP(EEP_FWREV_MINOR2));   
 101   2          }
 102   1      
 103   1        //---------- if FW version is not matched, initialize EEPROM data -----------
 104   1      
 105   1        if(GetFWRevEE()==((MCU_FW_Major<<16)|(MCU_FW_Sub0<<8)|(MCU_FW_Sub1))) 
 106   1        {         // exist EEPROM
 107   2      
 108   2          //if( rev !=((MCU_FW_Major<<16)|(MCU_FW_Sub0<<8)|(MCU_FW_Sub1)) )
 109   2            {
 110   3              if(GetProjectNameEE()==_FALSE)
 111   3              ClearBasicEE();
 112   3            }
 113   2        }
 114   1        else 
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 3   

 115   1        {
 116   2          Printf("\r\nCannot access EEPROM!!!!");
 117   2          Printf("\r\nNo initialize");
 118   2          DebugLevel = 0xff;
 119   2          return;
 120   2        }
 121   1        
 122   1        delay(100);
 123   1      
 124   1      
 125   1        SET_POWER_STATUS(_POWER_STATUS_OFF);
 126   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
 127   1      
 128   1      }
 129          
 130          
 131          
 132          
 133          //=============================================================================
 134          //                            Initialize WINBOND CPU                                                   
 135          //=============================================================================
 136          void InitCPU(void)
 137          {
 138   1        /*----- Initialize interrupt -------------*/
 139   1      
 140   1      //  TH1 = 0xfD;//38400    //    SMOD = 0      SMOD =1 //andy AWT 980924         
 141   1        TH1 = 0xf4; //9600    //    SMOD = 0      SMOD =1 //andy AWT 980924         
 142   1                  // 0ffh :57600 bps        
 143   1                  // 0fdh : 9600 bps  
 144   1                  //0fdh :19200 bps       
 145   1                  // 0fah : 4800 bps                
 146   1                  // 0f4h : 2400 bps                
 147   1                  // 0e8h : 1200 bps                
 148   1      
 149   1        SCON = 0x50;    // 0100 0000 mode 1 - 8 bit UART        
 150   1                  // Enable serial reception            
 151   1          TMOD = 0x22;    // 0010 0010 timer 0 - 8 bit auto reload    
 152   1                  // timer 1 - baud rate generator        
 153   1          TCON = 0x55;    // 0101 0001 timer 0,1 run            
 154   1                  // int 0,  edge triggered           
 155   1                  // int 1,  edge triggered           
 156   1                  // TF1 TR1 TF0 TR0  EI1 IT1 EI0 IT0       
 157   1        TH0 = TL0 = (64);   // 64=4608 Hz at 11.0592MHz
 158   1      
 159   1        PCON = 0x80;    // 0000 0000 SMOD(double baud rate bit) = 1   
 160   1        IP   = 0x02;    // 0000 0000 interrupt priority         
 161   1                  // -  - PT2 PS PT1 PX1 PT0 PX0               
 162   1      
 163   1        #ifdef SERIAL
 164   1        IE   = 0x92;    // 1001 0010 interrupt enable:Serial,TM0    
 165   1                    // EA - ET2 ES ET1 EX1 ET0 EX0          
 166   1      
 167   1        TI   = 1;     // LJY000724 // For Starting Serial TX 
 168   1        ES   = 1;     // LJY000724
 169   1        #else
                IE   = 0x82;
                #endif // SERIAL
 172   1      
 173   1        //------------ Timer 2 for Remocon --------------------------------
 174   1        T2CON  = 0x00;        // Timer2 Clear
 175   1        TR2    = 0;
 176   1        ET2    = 1;
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 4   

 177   1        //-----------------------------------------------------------------
 178   1      
 179   1        //Uart2
 180   1        //P0M0=0x7F;
 181   1        //P1M0=0x04;
 182   1             S2CON=0x50;                                 //Set UART Mode 1
 183   1             S2BRT=0xf4;                                 //Set 2UART overflow rate
 184   1            //AUXR2=0x08;                                 //SMOD = 1,TX12 = 0 (/12)
 185   1            //AUXR2|=0x10;                                //S2TR = 1
 186   1        AUXR2 |= 0x18;
 187   1      
 188   1        // Enable serial interrupt
 189   1        AUXIE |= 0x10;///EX2=1
 190   1      
 191   1        RS2_Xbusy=0;
 192   1        //PCA counter..
 193   1        CL=0; 
 194   1        CH=0;
 195   1        //AUXR2|=0x80;  //Fosc/12 for timer-0
 196   1        //CMOD=0x00; // //PCA clock is Sysclk / 12   7.2KHz
 197   1        //CMOD=0x02; // //PCA clock is Sysclk / 2   //43Khz
 198   1        CMOD=0x04; // //PCA clock is timer0  37HZ
 199   1        CCON|=  0x40;       //PCA Run
 200   1        //set pwm port 1.4 & 1.5
 201   1          //PCAPWM3 = 0x80;
 202   1      
 203   1        //P1M0=0x80;          //set input p1.6 
 204   1        //P1M0=0xC0;///add ADC AIN P1.6 & P1.7  (input mode)
 205   1          //P2M0=0x01;
 206   1        //P2M1=0x01;
 207   1        //P3M0=0x00;
 208   1        //P3M1=0x20;
 209   1        P0M0|=0x20|0x80;  //p0_5  //P0_7
 210   1      
 211   1        //P1M0|=0x04|0x40|0x20; ////set input p1.6 and P1.5 for adc function
 212   1        P1M0|=(0x04|0x80|0x40);///adc p1.7,P1.6
 213   1          
 214   1      
 215   1        P3M0=0x0C;
 216   1        P3M1=0x00|0x30;//p3.4 and P3.5 set push pull mode ryan@20210222
 217   1        P4M0=0x0C;
 218   1        P4M1=0x00;
 219   1      
 220   1      }
 221          
 222          #if (_POWER_DOWN_ENABLE==ON)
 223          void SET_MCU_POWER_DOWN_MODE(void)
 224          {
 225   1      
 226   1        Printf("(SET_MCU_POWER_DOWN_MODE) ");
 227   1      
 228   1         EX2 = 1;
 229   1         IE2 = 0;  ///INT2 wakeup
 230   1         IT2=1;
 231   1      
 232   1        EX3 = 1;
 233   1        IE3= 0;  ///INT3 wakeup
 234   1        IT3=1;
 235   1      
 236   1        IE_Temp=IE;
 237   1        IE=0x80;
 238   1      
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 5   

 239   1        Power_down_mode=1;
 240   1        P4_0 = 1; //LED RED off
 241   1        P4_1 = 1; //LED GREEN off
 242   1        PCON=0x82;  //inter power down  mode
 243   1        _nop_(); 
 244   1        _nop_(); 
 245   1        _nop_(); 
 246   1      
 247   1      //  InitCPU();
 248   1      
 249   1      }
 250          #endif
 251          
 252          BYTE Check_ADAP_IN(void)  
 253          {
 254   1      
 255   1      if((GET_ADAP_12()==_TRUE)||(P4_2==0))   
 256   1      {
 257   2        MCUTimerDelayXms(50);
 258   2        
 259   2        if((GET_ADAP_12()==_TRUE)||(P4_2==0))   
 260   2          return _TRUE;
 261   2        else
 262   2          return _FALSE;
 263   2      }
 264   1      else
 265   1        return _FALSE;
 266   1      }
 267          
 268          void SET_PWM(BYTE index, BYTE val)
 269          {
 270   1      //#if (_DEBUG_MESSAGE_PWM_TEST)
 271   1        Printf("\r\n(SET_PWM=%02x val=%02x)",(WORD)index,(WORD)val);
 272   1      //#endif
 273   1      switch(index)
 274   1      {
 275   2      case _CHG_CURR:  //P1_4
 276   2        #if 1
 277   2          CCAP2L=0x80;  
 278   2          CCAP2H =255-val;  
 279   2          CCAPM2=0x42;
 280   2      
 281   2            if(val==_CHARGE1100mA)
 282   2            {
 283   3            CCAPM2=0x00;  
 284   3            P1_4=0;
 285   3            }
 286   2            
 287   2          if(DVRChangeCurrent==0x10)  
 288   2            {     
 289   3            CCAP2L=0x80;  
 290   3            CCAP2H =255-_CHARGE300mA; 
 291   3            CCAPM2=0x42;  
 292   3            Printf("(*DVRChangeCurrent=300mA)");
 293   3            }
 294   2          else if(DVRChangeCurrent==0x11) 
 295   2            {
 296   3            CCAP2L=0x80;  
 297   3            CCAP2H =255-_CHARGE1000mA;  
 298   3            CCAPM2=0x42;  
 299   3            Printf("(*DVRChangeCurrent=1000mA)");
 300   3            }
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 6   

 301   2          
 302   2      /*  
 303   2          if(val==High_Current)
 304   2            {
 305   2            CCAPM2=0x00;  
 306   2            P1_4=0;
 307   2            }
 308   2      
 309   2          else
 310   2            {
 311   2            CCAPM2=0x00;  
 312   2            P1_4=1;
 313   2      
 314   2            }
 315   2      */
 316   2        #else
                  #if 0
                  if(val==High_Current)
                    P1_4=0;
                  else
                    P1_4=1;
                  #else
                    CCAP2L=0x80;  
                    CCAP2H =255-val;  
                    CCAPM2=0x42;    
              
                    if(val==High_Current)
                      {
                      CCAPM2=0x00;  
                      P1_4=0;
                      }
                #endif    
                  #endif
 334   2             break; 
 335   2       case _BL_PWM:  //P1_5
 336   2             CCAP3L=0x80;  
 337   2             CCAP3H =255-val;  
 338   2            CCAPM3=0x42;        
 339   2             break;
 340   2       case _RUN_PWM:
 341   2            CCON  |=  0x40;       //RUN  PCA Counter  
 342   2            break;
 343   2       case _STOP_PWM:
 344   2            CCON  &=  ~(0xBF);        //STOP PCA Counter
 345   2                break;
 346   2        
 347   2      default: 
 348   2            break;
 349   2      }
 350   1      
 351   1      
 352   1      }
 353          
 354          
 355          #define _ReadKey()     ((~P4>>3)& 0x01)  //PSW P4.3
 356          
 357          
 358          ////////////////////////////////
 359          
 360          //INTERRUPT(1, timer0_int)
 361          void timer0_int(void) interrupt 1 using 1     // interrupt number1, bank register 2
 362          {
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 7   

 363   1      BYTE TempKey;
 364   1      
 365   1        tm001++;
 366   1      
 367   1            //Timer Counter 
 368   1          tic02++;
 369   1        
 370   1      
 371   1        if(tic02>=10)   
 372   1        {
 373   2        g_usTimerCounter += 1;     ///per 103us  interrupt
 374   2        tic02=0;
 375   2        g_bNotifyTimer0Int=_TRUE;
 376   2        } 
 377   1      
 378   1          if(Time5ms)
 379   1            Time5ms--;
 380   1          if(Time5ms==0)
 381   1          {
 382   2            //TempKey=(( (P2&0xC0) >> 6) & 0x03);
 383   2            TempKey=(( (P3&0x0C) >> 2) & 0x03); //ENA&ENB, P3.2, P3.3 
 384   2            if(updn_reg[3] !=TempKey )// (( (P2&0x60) >> 5) & 0x03))  //Abel for HS SW key ......951102                   
 385   2            {                                              
 386   3              updn_reg[0] = updn_reg[1];                                
 387   3              updn_reg[1] = updn_reg[2];                                
 388   3              updn_reg[2] = updn_reg[3];                                
 389   3              updn_reg[3] =TempKey;// ( (P2&0x60) >> 5) & 0x03; 
 390   3              ChangeKey=1;    
 391   3            //else      //william-v1.42-961130
 392   3            //ChangeKey=0;  //william-v1.42-961130
 393   3            Time5ms=48;
 394   3      
 395   3            if((updn_reg[0] == 0) && (updn_reg[1] == 1) && (updn_reg[2] == 3)&& (updn_reg[3] == 2))  //UP Key   
 396   3                 EncorderCount++;        
 397   3            if((updn_reg[0] == 1) && (updn_reg[1] == 3) && (updn_reg[2] == 2)&& (updn_reg[3] == 0))  //UP Key   
 398   3                 EncorderCount++;      
 399   3             if((updn_reg[0] == 3) && (updn_reg[1] == 2) && (updn_reg[2] == 0)&& (updn_reg[3] == 1))  //UP Key  
 400   3                EncorderCount++;
 401   3             if((updn_reg[0] == 2) && (updn_reg[1] == 0) && (updn_reg[2] == 1)&& (updn_reg[3] == 3))  //UP Key    
 402   3                EncorderCount++;    
 403   3             
 404   3            if((updn_reg[0] == 0) && (updn_reg[1] == 2)&& (updn_reg[2] == 3)&& (updn_reg[3] == 1))  //DN Key   
 405   3                 EncorderCount--;    
 406   3             if((updn_reg[0] == 2) && (updn_reg[1] == 3)&& (updn_reg[2] == 1)&& (updn_reg[3] == 0))  //DN Key   
 407   3                 EncorderCount--;     
 408   3            if((updn_reg[0] == 3) && (updn_reg[1] == 1)&& (updn_reg[2] == 0)&& (updn_reg[3] == 2))  //DN Key  
 409   3                 EncorderCount--;
 410   3            if((updn_reg[0] == 1) && (updn_reg[1] == 0)&& (updn_reg[2] == 2)&& (updn_reg[3] == 3))  //DN Key  
 411   3                 EncorderCount--; 
 412   3      
 413   3              
 414   3            }
 415   2          }
 416   1      
 417   1          //Kane @HS 2007 0814 Ver1.31<<<<
 418   1          
 419   1          //---------- 0.01 sec timer ------------
 420   1          
 421   1        #ifdef CLOCK_11M
                  if( tm001 > 48 ) {      // LJY001220 0.01sec
                #elif defined CLOCK_22M
 424   1          if( tm001 > ((48*2)) ) {    // LJY001220 0.01sec
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 8   

 425   2        #endif
 426   2        
 427   2            stopWatch++;
 428   2            tm001 = 0;
 429   2            tic01++;
 430   2          
 431   2            if( tic01==100 ) 
 432   2            {       // 1 sec
 433   3              
 434   3              tic01 = 0;
 435   3              //second++;
 436   3              
 437   3            if(Key)
 438   3              keyticSec++;
 439   3            else
 440   3              keyticSec=0;
 441   3        
 442   3            }
 443   2            if( tic_pc!=0xffff ) 
 444   2              tic_pc++;
 445   2        
 446   2        
 447   2        if(tic_Init_time)
 448   2          tic_Init_time--;
 449   2        if(Power_Msg_Count)
 450   2          Power_Msg_Count--;
 451   2      
 452   2        /////////////////////////////////////////// 
 453   2      #if 1
 454   2        #if 0
              if( _ReadKey() )
              {   if (keytic==50)
                  {
                  Key = ON;
                  RepeatKey = ON;
                  KeyReady = ON;
                  //keytic = 0;
                  }
                  else if( keytic==800 ) {//8sec into DVR factory mode
                  Key = ON;
                  RepeatKey = 1;
                  KeyReady = 1;
                  keytic = 0;///50;
                  DVR_FACTORY_MODE=ON;
                  }
                  
                keytic++;
              }
              else 
                {
                  /*
                  if( (keytic>=50)&&(DVR_FACTORY_MODE==OFF) ) {  //0.5sec push
                  Key = ON;
                  RepeatKey = OFF;
                  KeyReady = ON;
                  keytic = 0;
                  }
                  else
                    */
                  {
                  DVR_FACTORY_MODE=OFF;
                  keytic = 0;
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 9   

                  Key=OFF;
                  }
                }
                #else
 491   2       if( _ReadKey() )
 492   2      {   
 493   3          if (keytic==50)
 494   3          {
 495   4            if((PowerFlag==OFF)||(GET_POWER_STATUS()==_POWER_STATUS_SAVING))
 496   4            {
 497   5            Key = ON;
 498   5            RepeatKey=OFF;  
 499   5            KeyReady = ON;
 500   5            }
 501   4          }
 502   3          else if( keytic==800 ) {//8sec into DVR factory mode  
 503   4      
 504   4            if(RepeatKey==ON)
 505   4            {
 506   5            Key = ON;
 507   5            KeyReady = ON;      
 508   5            DVR_FACTORY_MODE=ON;
 509   5            RepeatKey=OFF;  
 510   5            }
 511   4              
 512   4          keytic = 51;///51;
 513   4          }
 514   3          
 515   3        keytic++;
 516   3      }
 517   2      else 
 518   2        {
 519   3          if( (keytic>=50)&&(PowerFlag==ON)&&(RepeatKey==ON)) {  //0.5sec push
 520   4          Key = ON;
 521   4          KeyReady = ON;
 522   4          }
 523   3          else
 524   3          {
 525   4          Key=OFF;
 526   4          KeyReady = OFF;
 527   4          }
 528   3          
 529   3          RepeatKey = ON;
 530   3          keytic = 0;   
 531   3        } 
 532   2        #endif  
 533   2      #else
                if( _ReadKey() )
                {
                    if( keytic==800 ) {//8sec into DVR factory mode
                    Key = ON;
                    RepeatKey = 1;
                    KeyReady = 1;
                    keytic = 50;
                    DVR_FACTORY_MODE=ON;
                    }
                  keytic++;
                }
                else 
                  {
                        if( (keytic>=50)&&(DVR_FACTORY_MODE==OFF) ) {  //0.5sec push
                    Key = ON;
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 10  

                    RepeatKey = OFF;
                    KeyReady = ON;
                    keytic = 0;
                    }
                    else
                    {
                    DVR_FACTORY_MODE=OFF;
                    keytic = 0;
                    Key=OFF;
                    }
                  }
              #endif  
 561   2        /////////////////////////////////////////// 
 562   2        }
 563   1          
 564   1      }
 565          
 566          //=============================================================================//
 567          //                     ShowWorkTimer                                                                    //
 568          //=============================================================================//
 569          void ShowWorkingTimer(void)
 570          {
 571   1      WORD val;
 572   1      
 573   1        GraphicsPrint(RED,"\r\n==================================");
 574   1      
 575   1        if(day)
 576   1        {
 577   2        GraphicsPrint(YELLOW,"\r\nSystem has been working for %d days, %d hours, %d minutes and %d seconds",(WORD
             -)day,(WORD)hour,(WORD)minute,(WORD)second);
 578   2        }
 579   1        else if(hour)
 580   1        {
 581   2        GraphicsPrint(YELLOW,"\r\nSystem has been working for %d hours, %d minutes and %d seconds",(WORD)hour,(WO
             -RD)minute,(WORD)second);
 582   2        }
 583   1        else if(minute)
 584   1          {
 585   2          GraphicsPrint(YELLOW,"\r\nSystem has been working for %d minutes and %d seconds",(WORD)minute,(WORD)seco
             -nd);
 586   2          }
 587   1        else
 588   1          {
 589   2          GraphicsPrint(YELLOW,"\r\nSystem has been working for %d seconds",(WORD)second);
 590   2          }
 591   1      
 592   1        
 593   1      
 594   1        GraphicsPrint(GREEN,"\r\n(BatteryBTH=%d(%d.%dV))",(WORD)BatteryBTH\
 595   1            ,(WORD)((BatteryBTH*32)/10000)\
 596   1          ,(WORD)((BatteryBTH*32)%10000));
 597   1      
 598   1        if(GET_BTH_STATE()==_BATT_STATUS_TEMP_HIGH)
 599   1          GraphicsPrint(RED,"(TEMP_HIGH)");
 600   1        else if(GET_BATTERY_HIGH_TMEP_WARN() ==_TRUE)
 601   1          GraphicsPrint(YELLOW,"(HIGH_TMEP_WARN)"); 
 602   1      /// else if((GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW)||(BatteryBTH>=1010))
 603   1        else if((GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW))
 604   1          GraphicsPrint(BLUE,"(TEMP_LOW)");
 605   1        else if(GET_BATTERY_LOW_TMEP_WARN() ==_TRUE)
 606   1          GraphicsPrint(YELLOW,"(LOW_TMEP_WARN)");  
 607   1        else 
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 11  

 608   1          GraphicsPrint(GREEN,"(TEMP_NORMAL)");
 609   1        #if 0 
              GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%d.%dV))",(WORD)GET_BATTERY_CAPACITY()\
                  ,(WORD)((GET_BATTERY_CAPACITY()*(32-1))/10000)\
                  ,(WORD)((GET_BATTERY_CAPACITY()*(32-1))%10000));
              #else
 614   1        if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)   
 615   1        {
 616   2        val=((((GET_BATTERY_CAPACITY()*32)-150)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)-150)%10000)/100);
 617   2        val=(val*(54+1))/100;
 618   2        
 619   2        }
 620   1        else
 621   1        {
 622   2        //val=((((GET_BATTERY_CAPACITY()*32)/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)/*-800*/)%10000)/
             -100);
 623   2        //val=(val*(54+1))/100;
 624   2      
 625   2        val=((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_B
             -ATTERY_CAPACITY()*59)/*-800*/)/100));
 626   2      
 627   2          if((val/1000))
 628   2          val=(val/10)+1;
 629   2          else 
 630   2          val=(val/10);
 631   2          
 632   2        //val=(GET_BATTERY_CAPACITY()*176/10000);
 633   2        //val=GET_BATTERY_CAPACITY();
 634   2        }
 635   1      
 636   1        GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%d.%04dV))(%dV)",(WORD)GET_BATTERY_CAPACITY()\
 637   1            ,(WORD)((GET_BATTERY_CAPACITY()*(32+1))/10000)\
 638   1            ,(WORD)(((GET_BATTERY_CAPACITY()*(32+1))/*-200*/)%10000),(WORD)val);
 639   1      #endif
 640   1      
 641   1        if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_HIGH_CHARGE)
 642   1          GraphicsPrint(GREEN,"(HIGH_CHARGE)"); 
 643   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_LOW_CHARGE)  
 644   1          GraphicsPrint(YELLOW,"(LOW_CHARGE)"); 
 645   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NORMAL_CHARGE) 
 646   1          GraphicsPrint(MAGENTA,"(NORMAL_CHARGE)"); 
 647   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_STOP_CHARGE) 
 648   1          GraphicsPrint(RED,"(STOP_CHARGE)"); 
 649   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT) 
 650   1          GraphicsPrint(RED,"(CHARGE_NO_BATT)"); 
 651   1      
 652   1         if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)
 653   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL0)");  
 654   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL1)
 655   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL1)");  
 656   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL2)
 657   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL2)");  
 658   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL3)
 659   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL3)");  
 660   1      else   if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL4)  
 661   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL4)");  
 662   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)
 663   1        GraphicsPrint(BLUE,"(_BATT_STATUS_CAPACITY_MIN)");  
 664   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)
 665   1        GraphicsPrint(CYAN,"(_BATT_STATUS_CAPACITY_MAX)");  
 666   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX_STOP)
 667   1        GraphicsPrint(MAGENTA,"(_BATT_STATUS_CAPACITY_MAX_STOP)");  
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 12  

 668   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_NO_STARTUP)
 669   1        GraphicsPrint(MAGENTA,"(BATTERY_CAPACITY_NO_STARTUP)"); 
 670   1      else   if(GET_BATTERY_STATE()==_BATT_STATUS_NO_BATT)  
 671   1        GraphicsPrint(RED,"(_BATT_STATUS_NO_BATT)");  
 672   1      
 673   1        if(GET_CHARGE_TMEP_ABNORMAL()==_TRUE)
 674   1          GraphicsPrint(RED,"(CHARGE_TMEP_ABNORMAL)");  
 675   1      
 676   1      if(GET_POWER_STATUS()==7) 
 677   1        GraphicsPrint(CYAN,"\r\n(_POWER_STATUS_SAVING)");
 678   1      else if(GET_POWER_STATUS()==1)  
 679   1        GraphicsPrint(CYAN,"\r\n(_POWER_STATUS_OFF)");
 680   1      else if(GET_POWER_STATUS()==2)  
 681   1        GraphicsPrint(CYAN,"\r\n(_POWER_STATUS_NORMAL)");
 682   1      else
 683   1      GraphicsPrint(CYAN,"\r\n(POWER_STATUS=%d)",(WORD)GET_POWER_STATUS());
 684   1      
 685   1      #if 0
              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)   
              {
              val=((((GET_BATTERY_CAPACITY()*32)-150)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)-150)%10000)/100);
              val=(val*(54+1))/100;
              
              }
              else
              {
              val=((((GET_BATTERY_CAPACITY()*32)/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)/*-800*/)%10000)/100
             -);
              val=(val*(54+1))/100;
              }
              #endif
 698   1      //GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%dV))",(WORD)GET_BATTERY_CAPACITY(),(WORD)val);
 699   1      
 700   1      
 701   1      GraphicsPrint(RED,"\r\n==================================");
 702   1      
 703   1      }
 704          
 705          
 706          
 707          
 708          //------------------------------------------------------------------
 709          // void InitVars(void) - variable initialize
 710          //------------------------------------------------------------------
 711          void  InitVars(void)
 712          {
 713   1      BYTE j;
 714   1      for(j=0;j<29;j++)
 715   1          DVR_buf[j] = 0 ;  
 716   1      
 717   1      }
 718          
 719          
 720          //=============================================================================
 721          //                            Power LED ON / OFF                                                   
 722          //=============================================================================
 723          void PowerLED(EnumSystemTimerEventID flag)
 724          {
 725   1         
 726   1       switch(flag)
 727   1         { 
 728   2      case   _SYSTEM_TIMER_EVENT_GRN_RED_OFF:
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 13  

 729   2        CLR_RED();
 730   2        CLR_GREEN();
 731   2        break;
 732   2      case _SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON:
 733   2        CLR_GREEN();
 734   2        SET_RED();
 735   2        break;
 736   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF:
 737   2           SET_GREEN();
 738   2           CLR_RED();
 739   2        break;
 740   2         case _SYSTEM_TIMER_EVENT_GRN_RED_ON:
 741   2          SET_GREEN();
 742   2          SET_RED();
 743   2          break;
 744   2         case _SYSTEM_TIMER_EVENT_GRN_BLINK:
 745   2                    if(GET_GREEN())     
 746   2            {
 747   3          SET_GREEN();
 748   3          CLR_RED();
 749   3            }
 750   2          else
 751   2          {
 752   3          CLR_GREEN();
 753   3          CLR_RED();
 754   3          }
 755   2          break;
 756   2         case _SYSTEM_TIMER_EVENT_RED_BLINK:    
 757   2             if(GET_RED())
 758   2            {
 759   3           SET_RED();
 760   3           CLR_GREEN();
 761   3            }
 762   2          else
 763   2          {
 764   3          CLR_GREEN();
 765   3          CLR_RED();
 766   3          }
 767   2          break;  
 768   2        case _SYSTEM_TIMER_EVENT_GRN_RED_BLINK:
 769   2                      if(GET_GREEN())     
 770   2            {
 771   3          SET_GREEN();
 772   3          SET_RED();
 773   3            }
 774   2          else
 775   2          {
 776   3          CLR_GREEN();
 777   3          CLR_RED();
 778   3          }
 779   2         break;  
 780   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK:
 781   2          if(GET_RED())
 782   2            {
 783   3          SET_RED();
 784   3            }
 785   2            else
 786   2            {
 787   3            CLR_RED();
 788   3            }
 789   2          
 790   2            SET_GREEN();
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 14  

 791   2      
 792   2         break;   
 793   2        case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON:
 794   2          if(GET_GREEN())
 795   2            {
 796   3          SET_GREEN();
 797   3            }
 798   2            else
 799   2            {
 800   3            CLR_GREEN();
 801   3            }
 802   2          
 803   2            SET_RED();
 804   2      
 805   2          
 806   2          break;
 807   2         default:
 808   2                  break;
 809   2       }  
 810   1      }
 811          
 812          
 813          //------------------------ common routines with interrupts --------------------
 814          
 815          /*****************************************************************************/
 816          /*      Ext Int 1 Interrupt                                                  */
 817          /*****************************************************************************/
 818          //INTERRUPT(2, ext1_int)
 819          void  ext1_int(void) interrupt 2 using 1
 820          {
 821   1        EX1 = 0;
 822   1      }
 823          
 824          //****************************************************************************/
 825          //      Timer 0 Interrupt                                                  
 826          //      If TL0 overflow,
 827          //       .Invoke this interrupt
 828          //       .TL0 <- TH0
 829          //      TL0 is incremented every machine cycle
 830          //      Every machine cycle is 12*Tosc(11.0592MHz)
 831          //
 832          //      Every machine cycle = 1.085us
 833          //      Interrupt interval = 208us ( 1.085*(256-64(TH0)) )
 834          //      When tm001==48, it's 0.01sec.  48*208us
 835          //              
 836          //****************************************************************************/
 837          
 838          
 839          //*****************************************************************************
 840          //      Serial Interrupt                                                   
 841          //*****************************************************************************
 842          #ifdef SERIAL
 843          
 844          //INTERRUPT(4, serial_int)
 845          void serial_int(void) interrupt 4 using 1   // register bank 1
 846          {
 847   1        
 848   1        //day++;
 849   1        //year2=RI;
 850   1        //year1=TI;
 851   1        if( RI ) {          //--- Receive interrupt ----
 852   2          #if 0///def Hs_debug
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 15  

                    RS_buf[RS_in]=SBUF;
                    RS_in++;
                    if( RS_in>=BUF_MAX) RS_in = 0;
                  #else
 857   2          
 858   2            #ifdef USE_HI3521_UART2
                    #else
 860   2            RS_buf[RS_in]= SBUF;//andy awt 980928
 861   2                RS_in++;
 862   2            if( RS_in>=DVR_BUF_MAX) RS_in = 0;
 863   2            #endif  
 864   2          
 865   2          #endif
 866   2          RI = 0;
 867   2          //month++;
 868   2        }
 869   1      
 870   1        if( TI ) {          //--- Transmit interrupt ----
 871   2          TI = 0;
 872   2          RS_Xbusy=0;
 873   2        }
 874   1      }
 875          
 876          #if 1
 877          //INTERRUPT(12, serial2_int)
 878          void serial2_int(void) interrupt 12 using 1   
 879          {
 880   1        //--- Receive interrupt ----
 881   1        //day++;
 882   1        //year2=S2CON&0x0f;
 883   1        if ((S2CON & 0x01) == 0x01)
 884   1          {         
 885   2          // Clear reception flag
 886   2          S2CON = S2CON&0xfe;
 887   2          //#ifdef USE_HI3521_UART2
 888   2          DVR_buf[RS2_in] = S2BUF;
 889   2          //#endif
 890   2          //month++;
 891   2            RS2_in++;
 892   2          if( RS2_in>=/*BUF_MAX*/DVR_BUF_MAX) RS2_in = 0;
 893   2        }
 894   1        
 895   1        if ((S2CON & 0x02) == 0x02)
 896   1        {
 897   2          S2CON = S2CON&0xfd;
 898   2          RS2_Xbusy = 0;
 899   2        }
 900   1      }
 901          
 902          #endif
 903          
 904          //=============================================================================
 905          //    Serial RX Check                            
 906          //=============================================================================
 907          #if (_DEBUG_MESSAGE_Monitor==ON)
              
              BYTE RS_ready(void)
              {
                if( RS_in == RS_out ) return 0;
                else return 1;
              }
              
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 16  

              //=============================================================================
              //    Serial RX                              
              //=============================================================================
              BYTE RS_rx(void)
              {
                BYTE  ret;
                  
                ES = 0;
                ret = RS_buf[RS_out];
                RS_out++;
                  if(RS_out >= BUF_MAX) 
                  RS_out = 0;
                ES = 1;
              
                return ret;
              }
              #endif
 932          
 933          //=============================================================================
 934          //    Serial RX2 Check                           
 935          //=============================================================================
 936          BYTE RS2_ready(void)
 937          {
 938   1        if( RS2_in == RS2_out ) return 0;
 939   1        else return 1;
 940   1      }
 941          //=============================================================================
 942          //    Serial RX2                               
 943          //=============================================================================
 944          BYTE RS2_rx(void)
 945          {
 946   1        BYTE  ret;
 947   1          
 948   1        AUXIE&=0xEF;  //ES2=0
 949   1        ret = DVR_buf[RS2_out];
 950   1        RS2_out++;
 951   1          if(RS2_out >= DVR_BUF_MAX) 
 952   1          RS2_out = 0;
 953   1        AUXIE|=0x10;  //ES2=1
 954   1      
 955   1        return ret;
 956   1      }
 957          
 958          //=============================================================================
 959          //    Serial TX                              
 960          //=============================================================================
 961          #if (_DEBUG_MESSAGE_Monitor==ON)
              void RS_tx(BYTE tx_buf)
              {
                while(RS_Xbusy);
                SBUF = tx_buf;
                RS_Xbusy=1;
              }
              #endif
 969          //=============================================================================
 970          //    Serial2 TX                               
 971          //=============================================================================
 972          
 973          void RS2_tx(BYTE tx_buf)
 974          {
 975   1      
 976   1        while(RS2_Xbusy); 
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 17  

 977   1          S2BUF=tx_buf;
 978   1          RS2_Xbusy=1;
 979   1      }
 980          
 981          
 982          #endif  // SERIAL
 983          
 984          
 985          
 986          //****************************************************************************/
 987          //      Timer 2 Interrupt                                                  
 988          //      If TH2 and TL2 are overflowed,
 989          //       .Invoke this interrupt
 990          //       .TH2 <- RCAP2H
 991          //       .TL2 <- RCAP2L
 992          //      TL2 is incremented every machine cycle
 993          //      Every machine cycle is 12*Tosc(11.0592MHz)
 994          //
 995          //      Every machine cycle = 1.085us
 996          //      Interrupt interval  
 997          //        1) REMO_RC5 
 998          //          221.34us  ( 1.085*204 )   // (256-52) (0x10000-0xff34)
 999          //
1000          //          data length: 14bit (2sync bits, 1 control bit, 11 data bits) 24,889ms
1001          //
1002          //                +----+
1003          //          1 is coded:      |    |
1004          //                   +----+   
1005          //                  T    T
1006          //
1007          //                   +----+
1008          //          0 is coded: |    |
1009          //                      +----+    
1010          //                  T    T          T = 889us
1011          //
1012          //          *) DongYang
1013          //            209.62  ( 1.085*193 ) // (256-63) (0x10000-0xff3f)
1014          //-----------------------------------------------------------------------------
1015          //        2) REMO_NEC
1016          //          187.714us ( 1.085*173 )     // (256-83) (0x10000-0xff53)
1017          //              
1018          //****************************************************************************/
1019          //INTERRUPT(5, timer2_int)
1020          void timer2_int(void) interrupt 5 using 1     // using register block 3
1021          {
1022   1        TF2 = 0;          // clear overflow
1023   1      
1024   1        tm01++;
1025   1      
1026   1      }
1027          
1028          void delay(BYTE cnt)
1029          {
1030   1        WORD ttic01;
1031   1      
1032   1        ttic01 =  ( tic01 + cnt ) % 100;
1033   1        do {
1034   2          ;
1035   2        } while( tic01 != ttic01 );
1036   1      }
1037          
1038          #if (_POWER_DOWN_ENABLE==ON)
C51 COMPILER V9.60.0.0   CPU                                                               02/22/2021 17:15:58 PAGE 18  

1039          
1040          void int2_int(void) interrupt 6 using 1     // using register block 3
1041          {
1042   1        EX2=0;
1043   1        IE2=0;
1044   1        PCON=0x80;
1045   1        IE=IE_Temp;
1046   1        Power_down_mode=OFF;
1047   1      }
1048          
1049          void int3_int(void) interrupt 7 using 1     // using register block 3
1050          {
1051   1        EX3=0;
1052   1        IE3=0;
1053   1        PCON=0x80;
1054   1        IE=IE_Temp;
1055   1        Power_down_mode=OFF;
1056   1      }
1057          
1058          
1059          
1060          
1061          #endif
1062          
1063          
1064          
1065          
1066          
1067          
1068          
1069          
1070          
1071          
1072          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2708    ----
   CONSTANT SIZE    =   1085    ----
   XDATA SIZE       =     24       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     88    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

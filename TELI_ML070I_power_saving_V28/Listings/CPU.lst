C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CPU
OBJECT MODULE PLACED IN .\Output\CPU.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CPU.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\CPU.lst) TABS(2) OBJECT(.\Output\CPU.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  CPU.c                                                                               */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          #include<intrins.h>       ///_nop_(); 
   9          #include "config.h"
  10          #include "typedefs.h"
  11          #include "reg.h"
  12          #include "cpu.h"
  13          #include "main.h"
  14          #include "I2C.h"
  15          #include "Printf.h"
  16          #include "etc_eep.h"
  17          #include <math.h>
  18          #include "main.h"
  19          
  20          
  21          extern WORD g_usTimerCounter ;  
  22          extern StructPowerInfoType idata g_stPowerInfo;
  23          extern  BYTE DebugLevel;
  24          extern bit g_bNotifyTimer0Int;
  25          extern StructBatteryInfoType g_stBatteryInfo;
  26          extern WORD BatteryBTH;
  27          extern StructBatteryInfoType g_stBatteryInfo ;
  28          extern BYTE PowerFlag;
  29          extern BYTE Power_down_mode;
  30          extern BYTE DVRChangeCurrent;
  31          
  32          BYTE   year1=0,year2=0,month=0,day=0,hour=0,minute=0,second=0;
  33          BYTE DVR_FACTORY_MODE=0;
  34          BYTE IE_Temp=0;
  35          //===================== Timer =================================================
  36              DATA WORD keytic=0;
  37              DATA BYTE Key=0;
  38              bit KeyReady=0, RepeatKey = ON;
  39          
  40              DATA BYTE tm001;
  41              DATA  WORD  stopWatch;
  42              DATA  WORD  tm01=0;
  43              DATA  BYTE  tic01=0,tic02=0;  //, tic_pc;
  44              DATA  WORD  tic_pc=0;
  45              DATA  DWORD tic_PWR_SAVING=0;
  46              DATA  DWORD tic_Init_time=0;
  47             volatile bit PWR_SAVING_ACT_FLAG=0;
  48              extern BYTE Power_Saving_Flag;
  49              extern bit PWR_OFF_KEY_LOCK;
  50              DATA DWORD  SystemClock;      //00:00
  51              BYTE FormatSDCard=1;
  52          
  53          #ifdef SERIAL //=======================================================================
  54          
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 2   

  55          
  56          
  57          
  58          static  DATA BYTE RS_buf[BUF_MAX];
  59               //     DATA BYTE     RS_buf2[BUF_MAX];
  60              DATA BYTE DVR_buf[DVR_BUF_MAX];
  61          
  62              
  63              DATA BYTE   RS_in, RS_out=0;
  64              DATA BYTE   RS2_in=0,RS2_out=0;
  65              bit         RS_Xbusy=0;     // bit RS_Xbusy=0;
  66              bit     RS2_Xbusy=0;    // bit RS_Xbusy=0;
  67              
  68          
  69          #endif  // SERIAL ======================================================================
  70          
  71          BYTE  keyticSec=0;
  72          BYTE  FormatWait=0;
  73          BYTE  PowerDownWait=0;
  74          BYTE  updn_reg[4]={0,0,0,0};
  75          
  76          bit ChangeKey;
  77          BYTE Time5ms;
  78          //BYTE FLASH_FLAG;
  79          WORD LED_FLASH_COUNT,Power_Msg_Count;
  80          short EncorderCount=0;
  81          
  82          extern BYTE   KeyBuffer;
  83          
  84          //=============================================================================
  85          //    Main Initialize Routine
  86          //=============================================================================
  87          void main_init (void)
  88          {
  89   1        DWORD rev;
  90   1      
  91   1        rev = GetFWRevEE();
  92   1      
  93   1      
  94   1        Printf("\r\nPrev.FW:%02x%02x%02x", (WORD) ReadEEP(EEP_FWREV_MAJOR), (WORD) ReadEEP(EEP_FWREV_MINOR1), (WO
             -RD) ReadEEP(EEP_FWREV_MINOR2));
  95   1      
  96   1      if( GetFWRevEE()!=((MCU_FW_Major<<16)|(MCU_FW_Sub0<<8)|(MCU_FW_Sub1)))
  97   1          {
  98   2          Printf("\r\nCurr.FW:%02x%02x%02x",(WORD) MCU_FW_Major,(WORD) MCU_FW_Sub0,(WORD) MCU_FW_Sub1);
  99   2          SaveFWRevEE();
 100   2          Printf("\r\nCurr.FW:%02x%02x%02x",(WORD) ReadEEP(EEP_FWREV_MAJOR), (WORD) ReadEEP(EEP_FWREV_MINOR1), (WO
             -RD) ReadEEP(EEP_FWREV_MINOR2));   
 101   2          }
 102   1      
 103   1        //---------- if FW version is not matched, initialize EEPROM data -----------
 104   1      
 105   1        if(GetFWRevEE()==((MCU_FW_Major<<16)|(MCU_FW_Sub0<<8)|(MCU_FW_Sub1))) 
 106   1        {         // exist EEPROM
 107   2      
 108   2          //if( rev !=((MCU_FW_Major<<16)|(MCU_FW_Sub0<<8)|(MCU_FW_Sub1)) )
 109   2            {
 110   3              if(GetProjectNameEE()==_FALSE)
 111   3              ClearBasicEE();
 112   3            }
 113   2        }
 114   1        else 
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 3   

 115   1        {
 116   2          Printf("\r\nCannot access EEPROM!!!!");
 117   2          Printf("\r\nNo initialize");
 118   2          DebugLevel = 0xff;
 119   2          return;
 120   2        }
 121   1        
 122   1        delay(100);
 123   1      
 124   1      
 125   1        SET_POWER_STATUS(_POWER_STATUS_OFF);
 126   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
 127   1      
 128   1      }
 129          
 130          
 131          
 132          
 133          //=============================================================================
 134          //                            Initialize WINBOND CPU                                                   
 135          //=============================================================================
 136          void InitCPU(void)
 137          {
 138   1        /*----- Initialize interrupt -------------*/
 139   1      
 140   1      //  TH1 = 0xfD;//38400    //    SMOD = 0      SMOD =1 //andy AWT 980924         
 141   1        TH1 = 0xf4; //9600    //    SMOD = 0      SMOD =1 //andy AWT 980924         
 142   1                  // 0ffh :57600 bps        
 143   1                  // 0fdh : 9600 bps  
 144   1                  //0fdh :19200 bps       
 145   1                  // 0fah : 4800 bps                
 146   1                  // 0f4h : 2400 bps                
 147   1                  // 0e8h : 1200 bps                
 148   1      
 149   1        SCON = 0x50;    // 0100 0000 mode 1 - 8 bit UART        
 150   1                  // Enable serial reception            
 151   1          TMOD = 0x22;    // 0010 0010 timer 0 - 8 bit auto reload    
 152   1                  // timer 1 - baud rate generator        
 153   1          TCON = 0x55;    // 0101 0001 timer 0,1 run            
 154   1                  // int 0,  edge triggered           
 155   1                  // int 1,  edge triggered           
 156   1                  // TF1 TR1 TF0 TR0  EI1 IT1 EI0 IT0       
 157   1      #if (_1KHZ_PWM==ON) 
              TH0 = TL0 = (255-6);  // PWM 1Khz frequency
              
              #else
 161   1        TH0 = TL0 = (64);   // 64=4608 Hz at 11.0592MHz
 162   1      #endif
 163   1        PCON = 0x80;    // 0000 0000 SMOD(double baud rate bit) = 1   
 164   1        IP   = 0x02;    // 0000 0000 interrupt priority         
 165   1                  // -  - PT2 PS PT1 PX1 PT0 PX0               
 166   1      
 167   1        #ifdef SERIAL
 168   1        IE   = 0x92;    // 1001 0010 interrupt enable:Serial,TM0    
 169   1                    // EA - ET2 ES ET1 EX1 ET0 EX0          
 170   1      
 171   1        TI   = 1;     // LJY000724 // For Starting Serial TX 
 172   1        ES   = 1;     // LJY000724
 173   1        #else
                IE   = 0x82;
                #endif // SERIAL
 176   1      
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 4   

 177   1        //------------ Timer 2 for Remocon --------------------------------
 178   1        #if (_1KHZ_PWM==ON)
                TL2=0x64-20;//0xE3;
                TH2=0xFF;
                RCAP2L=0x64-20;//0xE3;
                RCAP2H=0xFF;
              
                T2CON  = 0x00;        // Timer2 Clear
                TR2    = 0;
                ET2    = 1;
              
                T2CON = 0x04;       // Timer2 run
                AUXR |=0x80;  //Timer1 for UART2  
                #else
 191   1        T2CON  = 0x00;        // Timer2 Clear
 192   1        TR2    = 0;
 193   1        ET2    = 1;
 194   1        #endif
 195   1        //-----------------------------------------------------------------
 196   1      
 197   1        //Uart2
 198   1        //P0M0=0x7F;
 199   1        //P1M0=0x04;
 200   1             S2CON=0x50;                                 //Set UART Mode 1
 201   1             S2BRT=0xf4;                                 //Set 2UART overflow rate
 202   1            //AUXR2=0x08;                                 //SMOD = 1,TX12 = 0 (/12)
 203   1            //AUXR2|=0x10;                                //S2TR = 1
 204   1        AUXR2 |= 0x18;
 205   1      
 206   1        // Enable serial interrupt
 207   1        AUXIE |= 0x10;///EX2=1
 208   1      
 209   1        RS2_Xbusy=0;
 210   1        //PCA counter..
 211   1        CL=0; 
 212   1        CH=0;
 213   1        //AUXR2|=0x80;  //Fosc/12 for timer-0
 214   1        //CMOD=0x00; // //PCA clock is Sysclk / 12   7.2KHz
 215   1        //CMOD=0x02; // //PCA clock is Sysclk / 2   //43Khz
 216   1        CMOD=0x04; // //PCA clock is timer0  37HZ
 217   1        CCON|=  0x40;       //PCA Run
 218   1        //set pwm port 1.4 & 1.5
 219   1          //PCAPWM3 = 0x80;
 220   1      
 221   1        //P1M0=0x80;          //set input p1.6 
 222   1        //P1M0=0xC0;///add ADC AIN P1.6 & P1.7  (input mode)
 223   1          //P2M0=0x01;
 224   1        //P2M1=0x01;
 225   1        //P3M0=0x00;
 226   1        //P3M1=0x20;
 227   1        P0M0|=0x20|0x80;  //p0_5  //P0_7
 228   1      
 229   1        //P1M0|=0x04|0x40|0x20; ////set input p1.6 and P1.5 for adc function
 230   1        P1M0|=(0x04|0x80|0x40);///adc p1.7,P1.6
 231   1          
 232   1        P2M1=0x40;    //|P2_6 set push pull mode ryan@20210312
 233   1      
 234   1        P3M0=0x0C;
 235   1        P3M1=0x00;//|0x30;//p3.4 and P3.5 set push pull mode ryan@20210222
 236   1        P4M0=0x0C;
 237   1        P4M1=0x00;
 238   1      
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 5   

 239   1      }
 240          
 241          #if (_POWER_DOWN_ENABLE==ON)
 242          void SET_MCU_POWER_DOWN_MODE(void)
 243          {
 244   1      
 245   1        Printf("(SET_MCU_POWER_DOWN_MODE) ");
 246   1      
 247   1         EX2 = 1;
 248   1         IE2 = 0;  ///INT2 wakeup
 249   1         IT2=1;
 250   1      
 251   1        EX3 = 1;
 252   1        IE3= 0;  ///INT3 wakeup
 253   1        IT3=1;
 254   1      
 255   1        IE_Temp=IE;
 256   1        IE=0x80;
 257   1      
 258   1        Power_down_mode=1;
 259   1        P4_0 = 1; //LED RED off
 260   1        P4_1 = 1; //LED GREEN off
 261   1        PCON=0x82;  //inter power down  mode
 262   1        _nop_(); 
 263   1        _nop_(); 
 264   1        _nop_(); 
 265   1      
 266   1      //  InitCPU();
 267   1      
 268   1      }
 269          #endif
 270          
 271          BYTE Check_ADAP_IN(void)  
 272          {
 273   1      
 274   1      if((GET_ADAP_12()==_TRUE)||(P4_2==0))   
 275   1      {
 276   2        MCUTimerDelayXms(50);
 277   2        
 278   2        if((GET_ADAP_12()==_TRUE)||(P4_2==0))   
 279   2          return _TRUE;
 280   2        else
 281   2          return _FALSE;
 282   2      }
 283   1      else
 284   1        return _FALSE;
 285   1      }
 286          
 287          void SET_PWM(BYTE index, BYTE val)
 288          {
 289   1      //#if (_DEBUG_MESSAGE_PWM_TEST)
 290   1        Printf("\r\n(SET_PWM=%02x val=%02x)",(WORD)index,(WORD)val);
 291   1      //#endif
 292   1      switch(index)
 293   1      {
 294   2      case _CHG_CURR:  //P1_4
 295   2        #if 1
 296   2          CCAP2L=0x80;  
 297   2          CCAP2H =255-val;  
 298   2          CCAPM2=0x42;
 299   2      
 300   2            if(val==_CHARGE1100mA)
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 6   

 301   2            {
 302   3            CCAPM2=0x00;  
 303   3            P1_4=0;
 304   3            }
 305   2            
 306   2          if(DVRChangeCurrent==0x10)  
 307   2            {     
 308   3            CCAP2L=0x80;  
 309   3            CCAP2H =255-_CHARGE300mA; 
 310   3            CCAPM2=0x42;  
 311   3            Printf("(*DVRChangeCurrent=300mA)");
 312   3            }
 313   2          else if(DVRChangeCurrent==0x11) 
 314   2            {
 315   3            CCAP2L=0x80;  
 316   3            CCAP2H =255-_CHARGE1000mA;  
 317   3            CCAPM2=0x42;  
 318   3            Printf("(*DVRChangeCurrent=1000mA)");
 319   3            }
 320   2          
 321   2      /*  
 322   2          if(val==High_Current)
 323   2            {
 324   2            CCAPM2=0x00;  
 325   2            P1_4=0;
 326   2            }
 327   2      
 328   2          else
 329   2            {
 330   2            CCAPM2=0x00;  
 331   2            P1_4=1;
 332   2      
 333   2            }
 334   2      */
 335   2        #else
                  #if 0
                  if(val==High_Current)
                    P1_4=0;
                  else
                    P1_4=1;
                  #else
                    CCAP2L=0x80;  
                    CCAP2H =255-val;  
                    CCAPM2=0x42;    
              
                    if(val==High_Current)
                      {
                      CCAPM2=0x00;  
                      P1_4=0;
                      }
                #endif    
                  #endif
 353   2             break; 
 354   2       case _BL_PWM:  //P1_5
 355   2             CCAP3L=0x80;  
 356   2             CCAP3H =255-val;  
 357   2            CCAPM3=0x42;        
 358   2             break;
 359   2       case _RUN_PWM:
 360   2            CCON  |=  0x40;       //RUN  PCA Counter  
 361   2            break;
 362   2       case _STOP_PWM:
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 7   

 363   2            CCON  &=  ~(0xBF);        //STOP PCA Counter
 364   2                break;
 365   2        
 366   2      default: 
 367   2            break;
 368   2      }
 369   1      
 370   1      
 371   1      }
 372          
 373          
 374          #define _ReadKey()     ((~P4>>3)& 0x01)  //PSW P4.3
 375          
 376          
 377          ////////////////////////////////
 378          
 379          //INTERRUPT(1, timer0_int)
 380          void timer0_int(void) interrupt 1 using 1     // interrupt number1, bank register 2
 381          {
 382   1      
 383   1       #if  (_1KHZ_PWM==ON)
               #else
 385   1      BYTE TempKey;
 386   1      
 387   1        tm001++;
 388   1      
 389   1            //Timer Counter 
 390   1          tic02++;
 391   1        
 392   1      
 393   1        if(tic02>=10)   
 394   1        {
 395   2        g_usTimerCounter += 1;     ///per 103us  interrupt
 396   2        tic02=0;
 397   2        g_bNotifyTimer0Int=_TRUE;
 398   2        } 
 399   1      
 400   1          if(Time5ms)
 401   1            Time5ms--;
 402   1          if(Time5ms==0)
 403   1          {
 404   2            //TempKey=(( (P2&0xC0) >> 6) & 0x03);
 405   2            TempKey=(( (P3&0x0C) >> 2) & 0x03); //ENA&ENB, P3.2, P3.3 
 406   2            if(updn_reg[3] !=TempKey )// (( (P2&0x60) >> 5) & 0x03))  //Abel for HS SW key ......951102                   
 407   2            {                                              
 408   3              updn_reg[0] = updn_reg[1];                                
 409   3              updn_reg[1] = updn_reg[2];                                
 410   3              updn_reg[2] = updn_reg[3];                                
 411   3              updn_reg[3] =TempKey;// ( (P2&0x60) >> 5) & 0x03; 
 412   3              ChangeKey=1;    
 413   3            //else      //william-v1.42-961130
 414   3            //ChangeKey=0;  //william-v1.42-961130
 415   3            Time5ms=48;
 416   3      
 417   3            if((updn_reg[0] == 0) && (updn_reg[1] == 1) && (updn_reg[2] == 3)&& (updn_reg[3] == 2))  //UP Key   
 418   3                 EncorderCount++;        
 419   3            if((updn_reg[0] == 1) && (updn_reg[1] == 3) && (updn_reg[2] == 2)&& (updn_reg[3] == 0))  //UP Key   
 420   3                 EncorderCount++;      
 421   3             if((updn_reg[0] == 3) && (updn_reg[1] == 2) && (updn_reg[2] == 0)&& (updn_reg[3] == 1))  //UP Key  
 422   3                EncorderCount++;
 423   3             if((updn_reg[0] == 2) && (updn_reg[1] == 0) && (updn_reg[2] == 1)&& (updn_reg[3] == 3))  //UP Key    
 424   3                EncorderCount++;    
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 8   

 425   3             
 426   3            if((updn_reg[0] == 0) && (updn_reg[1] == 2)&& (updn_reg[2] == 3)&& (updn_reg[3] == 1))  //DN Key   
 427   3                 EncorderCount--;    
 428   3             if((updn_reg[0] == 2) && (updn_reg[1] == 3)&& (updn_reg[2] == 1)&& (updn_reg[3] == 0))  //DN Key   
 429   3                 EncorderCount--;     
 430   3            if((updn_reg[0] == 3) && (updn_reg[1] == 1)&& (updn_reg[2] == 0)&& (updn_reg[3] == 2))  //DN Key  
 431   3                 EncorderCount--;
 432   3            if((updn_reg[0] == 1) && (updn_reg[1] == 0)&& (updn_reg[2] == 2)&& (updn_reg[3] == 3))  //DN Key  
 433   3                 EncorderCount--; 
 434   3      
 435   3              
 436   3            }
 437   2          }
 438   1      
 439   1          //Kane @HS 2007 0814 Ver1.31<<<<
 440   1          
 441   1          //---------- 0.01 sec timer ------------
 442   1          
 443   1        #ifdef CLOCK_11M
                  if( tm001 > 48 ) {      // LJY001220 0.01sec
                #elif defined CLOCK_22M
 446   1          if( tm001 > ((48*2)) ) {    // LJY001220 0.01sec
 447   2        #endif
 448   2        
 449   2            stopWatch++;
 450   2            tm001 = 0;
 451   2            tic01++;
 452   2          
 453   2            if( tic01==100 ) 
 454   2            {       // 1 sec
 455   3              
 456   3              tic01 = 0;
 457   3              //second++;
 458   3              
 459   3            if(Key)
 460   3              keyticSec++;
 461   3            else
 462   3              keyticSec=0;
 463   3        
 464   3            }
 465   2            if( tic_pc!=0xffff ) 
 466   2              tic_pc++;
 467   2        
 468   2        
 469   2        if(tic_Init_time)
 470   2          tic_Init_time--;
 471   2        if(Power_Msg_Count)
 472   2          Power_Msg_Count--;
 473   2      
 474   2        /////////////////////////////////////////// 
 475   2      #if 1
 476   2        #if 0
              if( _ReadKey() )
              {   if (keytic==50)
                  {
                  Key = ON;
                  RepeatKey = ON;
                  KeyReady = ON;
                  //keytic = 0;
                  }
                  else if( keytic==800 ) {//8sec into DVR factory mode
                  Key = ON;
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 9   

                  RepeatKey = 1;
                  KeyReady = 1;
                  keytic = 0;///50;
                  DVR_FACTORY_MODE=ON;
                  }
                  
                keytic++;
              }
              else 
                {
                  /*
                  if( (keytic>=50)&&(DVR_FACTORY_MODE==OFF) ) {  //0.5sec push
                  Key = ON;
                  RepeatKey = OFF;
                  KeyReady = ON;
                  keytic = 0;
                  }
                  else
                    */
                  {
                  DVR_FACTORY_MODE=OFF;
                  keytic = 0;
                  Key=OFF;
                  }
                }
                #else
 513   2       if( _ReadKey() )
 514   2      {   
 515   3          if (keytic==50)
 516   3          {
 517   4            if((PowerFlag==OFF)||(GET_POWER_STATUS()==_POWER_STATUS_SAVING))
 518   4            {
 519   5            Key = ON;
 520   5            RepeatKey=OFF;  
 521   5            KeyReady = ON;
 522   5            }
 523   4          }
 524   3          else if( keytic==800 ) {//8sec into DVR factory mode  
 525   4      
 526   4            if(RepeatKey==ON)
 527   4            {
 528   5            Key = ON;
 529   5            KeyReady = ON;      
 530   5            DVR_FACTORY_MODE=ON;
 531   5            RepeatKey=OFF;  
 532   5            }
 533   4              
 534   4          keytic = 51;///51;
 535   4          }
 536   3          
 537   3        keytic++;
 538   3      }
 539   2      else 
 540   2        {
 541   3          if( (keytic>=50)&&(PowerFlag==ON)&&(RepeatKey==ON)) {  //0.5sec push
 542   4          Key = ON;
 543   4          KeyReady = ON;
 544   4          }
 545   3          else
 546   3          {
 547   4          Key=OFF;
 548   4          KeyReady = OFF;
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 10  

 549   4          }
 550   3          
 551   3          RepeatKey = ON;
 552   3          keytic = 0;   
 553   3        } 
 554   2        #endif  
 555   2      #else
                if( _ReadKey() )
                {
                    if( keytic==800 ) {//8sec into DVR factory mode
                    Key = ON;
                    RepeatKey = 1;
                    KeyReady = 1;
                    keytic = 50;
                    DVR_FACTORY_MODE=ON;
                    }
                  keytic++;
                }
                else 
                  {
                        if( (keytic>=50)&&(DVR_FACTORY_MODE==OFF) ) {  //0.5sec push
                    Key = ON;
                    RepeatKey = OFF;
                    KeyReady = ON;
                    keytic = 0;
                    }
                    else
                    {
                    DVR_FACTORY_MODE=OFF;
                    keytic = 0;
                    Key=OFF;
                    }
                  }
              #endif  
 583   2        /////////////////////////////////////////// 
 584   2        }
 585   1        #endif  
 586   1      }
 587          
 588          //=============================================================================//
 589          //                     ShowWorkTimer                                                                    //
 590          //=============================================================================//
 591          void ShowWorkingTimer(void)
 592          {
 593   1      WORD val;
 594   1      
 595   1        GraphicsPrint(RED,"\r\n==================================");
 596   1      
 597   1        if(day)
 598   1        {
 599   2        GraphicsPrint(YELLOW,"\r\nSystem has been working for %d days, %d hours, %d minutes and %d seconds",(WORD
             -)day,(WORD)hour,(WORD)minute,(WORD)second);
 600   2        }
 601   1        else if(hour)
 602   1        {
 603   2        GraphicsPrint(YELLOW,"\r\nSystem has been working for %d hours, %d minutes and %d seconds",(WORD)hour,(WO
             -RD)minute,(WORD)second);
 604   2        }
 605   1        else if(minute)
 606   1          {
 607   2          GraphicsPrint(YELLOW,"\r\nSystem has been working for %d minutes and %d seconds",(WORD)minute,(WORD)seco
             -nd);
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 11  

 608   2          }
 609   1        else
 610   1          {
 611   2          GraphicsPrint(YELLOW,"\r\nSystem has been working for %d seconds",(WORD)second);
 612   2          }
 613   1      
 614   1        
 615   1      
 616   1        GraphicsPrint(GREEN,"\r\n(BatteryBTH=%d(%d.%dV))",(WORD)BatteryBTH\
 617   1            ,(WORD)((BatteryBTH*32)/10000)\
 618   1          ,(WORD)((BatteryBTH*32)%10000));
 619   1      
 620   1        if(GET_BTH_STATE()==_BATT_STATUS_TEMP_HIGH)
 621   1          GraphicsPrint(RED,"(TEMP_HIGH)");
 622   1        else if(GET_BATTERY_HIGH_TMEP_WARN() ==_TRUE)
 623   1          GraphicsPrint(YELLOW,"(HIGH_TMEP_WARN)"); 
 624   1      /// else if((GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW)||(BatteryBTH>=1010))
 625   1        else if((GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW))
 626   1          GraphicsPrint(BLUE,"(TEMP_LOW)");
 627   1        else if(GET_BATTERY_LOW_TMEP_WARN() ==_TRUE)
 628   1          GraphicsPrint(YELLOW,"(LOW_TMEP_WARN)");  
 629   1        else 
 630   1          GraphicsPrint(GREEN,"(TEMP_NORMAL)");
 631   1        #if 0 
              GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%d.%dV))",(WORD)GET_BATTERY_CAPACITY()\
                  ,(WORD)((GET_BATTERY_CAPACITY()*(32-1))/10000)\
                  ,(WORD)((GET_BATTERY_CAPACITY()*(32-1))%10000));
              #else
 636   1        if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)   
 637   1        {
 638   2        val=((((GET_BATTERY_CAPACITY()*32)-150)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)-150)%10000)/100);
 639   2        val=(val*(54+1))/100;
 640   2        
 641   2        }
 642   1        else
 643   1        {
 644   2        //val=((((GET_BATTERY_CAPACITY()*32)/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)/*-800*/)%10000)/
             -100);
 645   2        //val=(val*(54+1))/100;
 646   2      
 647   2        val=((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_B
             -ATTERY_CAPACITY()*59)/*-800*/)/100));
 648   2      
 649   2          if((val/1000))
 650   2          val=(val/10)+1;
 651   2          else 
 652   2          val=(val/10);
 653   2          
 654   2        //val=(GET_BATTERY_CAPACITY()*176/10000);
 655   2        //val=GET_BATTERY_CAPACITY();
 656   2        }
 657   1      
 658   1        GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%d.%04dV))(%dV)",(WORD)GET_BATTERY_CAPACITY()\
 659   1            ,(WORD)((GET_BATTERY_CAPACITY()*(32+1))/10000)\
 660   1            ,(WORD)(((GET_BATTERY_CAPACITY()*(32+1))/*-200*/)%10000),(WORD)val);
 661   1      #endif
 662   1      
 663   1        if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_HIGH_CHARGE)
 664   1          GraphicsPrint(GREEN,"(HIGH_CHARGE)"); 
 665   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_LOW_CHARGE)  
 666   1          GraphicsPrint(YELLOW,"(LOW_CHARGE)"); 
 667   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NORMAL_CHARGE) 
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 12  

 668   1          GraphicsPrint(MAGENTA,"(NORMAL_CHARGE)"); 
 669   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_STOP_CHARGE) 
 670   1          GraphicsPrint(RED,"(STOP_CHARGE)"); 
 671   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT) 
 672   1          GraphicsPrint(RED,"(CHARGE_NO_BATT)"); 
 673   1      
 674   1         if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)
 675   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL0)");  
 676   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL1)
 677   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL1)");  
 678   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL2)
 679   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL2)");  
 680   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL3)
 681   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL3)");  
 682   1      else   if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL4)  
 683   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL4)");  
 684   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)
 685   1        GraphicsPrint(BLUE,"(_BATT_STATUS_CAPACITY_MIN)");  
 686   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)
 687   1        GraphicsPrint(CYAN,"(_BATT_STATUS_CAPACITY_MAX)");  
 688   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX_STOP)
 689   1        GraphicsPrint(MAGENTA,"(_BATT_STATUS_CAPACITY_MAX_STOP)");  
 690   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_NO_STARTUP)
 691   1        GraphicsPrint(MAGENTA,"(BATTERY_CAPACITY_NO_STARTUP)"); 
 692   1      else   if(GET_BATTERY_STATE()==_BATT_STATUS_NO_BATT)  
 693   1        GraphicsPrint(RED,"(_BATT_STATUS_NO_BATT)");  
 694   1      
 695   1        if(GET_CHARGE_TMEP_ABNORMAL()==_TRUE)
 696   1          GraphicsPrint(RED,"(CHARGE_TMEP_ABNORMAL)");  
 697   1      
 698   1      if(GET_POWER_STATUS()==7) 
 699   1        GraphicsPrint(CYAN,"\r\n(_POWER_STATUS_SAVING)");
 700   1      else if(GET_POWER_STATUS()==1)  
 701   1        GraphicsPrint(CYAN,"\r\n(_POWER_STATUS_OFF)");
 702   1      else if(GET_POWER_STATUS()==2)  
 703   1        GraphicsPrint(CYAN,"\r\n(_POWER_STATUS_NORMAL)");
 704   1      else
 705   1      GraphicsPrint(CYAN,"\r\n(POWER_STATUS=%d)",(WORD)GET_POWER_STATUS());
 706   1      
 707   1      #if 0
              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)   
              {
              val=((((GET_BATTERY_CAPACITY()*32)-150)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)-150)%10000)/100);
              val=(val*(54+1))/100;
              
              }
              else
              {
              val=((((GET_BATTERY_CAPACITY()*32)/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)/*-800*/)%10000)/100
             -);
              val=(val*(54+1))/100;
              }
              #endif
 720   1      //GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%dV))",(WORD)GET_BATTERY_CAPACITY(),(WORD)val);
 721   1      
 722   1      
 723   1      GraphicsPrint(RED,"\r\n==================================");
 724   1      
 725   1      }
 726          
 727          
 728          
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 13  

 729          
 730          //------------------------------------------------------------------
 731          // void InitVars(void) - variable initialize
 732          //------------------------------------------------------------------
 733          void  InitVars(void)
 734          {
 735   1      BYTE j;
 736   1      for(j=0;j<29;j++)
 737   1          DVR_buf[j] = 0 ;  
 738   1      
 739   1      }
 740          
 741          
 742          //=============================================================================
 743          //                            Power LED ON / OFF                                                   
 744          //=============================================================================
 745          void PowerLED(EnumSystemTimerEventID flag)
 746          {
 747   1         
 748   1       switch(flag)
 749   1         { 
 750   2      case   _SYSTEM_TIMER_EVENT_GRN_RED_OFF:
 751   2        CLR_RED();
 752   2        CLR_GREEN();
 753   2        break;
 754   2      case _SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON:
 755   2        CLR_GREEN();
 756   2        SET_RED();
 757   2        break;
 758   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF:
 759   2           SET_GREEN();
 760   2           CLR_RED();
 761   2        break;
 762   2         case _SYSTEM_TIMER_EVENT_GRN_RED_ON:
 763   2          SET_GREEN();
 764   2          SET_RED();
 765   2          break;
 766   2         case _SYSTEM_TIMER_EVENT_GRN_BLINK:
 767   2                    if(GET_GREEN())     
 768   2            {
 769   3          SET_GREEN();
 770   3          CLR_RED();
 771   3            }
 772   2          else
 773   2          {
 774   3          CLR_GREEN();
 775   3          CLR_RED();
 776   3          }
 777   2          break;
 778   2         case _SYSTEM_TIMER_EVENT_RED_BLINK:    
 779   2             if(GET_RED())
 780   2            {
 781   3           SET_RED();
 782   3           CLR_GREEN();
 783   3            }
 784   2          else
 785   2          {
 786   3          CLR_GREEN();
 787   3          CLR_RED();
 788   3          }
 789   2          break;  
 790   2        case _SYSTEM_TIMER_EVENT_GRN_RED_BLINK:
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 14  

 791   2                      if(GET_GREEN())     
 792   2            {
 793   3          SET_GREEN();
 794   3          SET_RED();
 795   3            }
 796   2          else
 797   2          {
 798   3          CLR_GREEN();
 799   3          CLR_RED();
 800   3          }
 801   2         break;  
 802   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK:
 803   2          if(GET_RED())
 804   2            {
 805   3          SET_RED();
 806   3            }
 807   2            else
 808   2            {
 809   3            CLR_RED();
 810   3            }
 811   2          
 812   2            SET_GREEN();
 813   2      
 814   2         break;   
 815   2        case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON:
 816   2          if(GET_GREEN())
 817   2            {
 818   3          SET_GREEN();
 819   3            }
 820   2            else
 821   2            {
 822   3            CLR_GREEN();
 823   3            }
 824   2          
 825   2            SET_RED();
 826   2      
 827   2          
 828   2          break;
 829   2         default:
 830   2                  break;
 831   2       }  
 832   1      }
 833          
 834          
 835          //------------------------ common routines with interrupts --------------------
 836          
 837          /*****************************************************************************/
 838          /*      Ext Int 1 Interrupt                                                  */
 839          /*****************************************************************************/
 840          //INTERRUPT(2, ext1_int)
 841          void  ext1_int(void) interrupt 2 using 1
 842          {
 843   1        EX1 = 0;
 844   1      }
 845          
 846          //****************************************************************************/
 847          //      Timer 0 Interrupt                                                  
 848          //      If TL0 overflow,
 849          //       .Invoke this interrupt
 850          //       .TL0 <- TH0
 851          //      TL0 is incremented every machine cycle
 852          //      Every machine cycle is 12*Tosc(11.0592MHz)
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 15  

 853          //
 854          //      Every machine cycle = 1.085us
 855          //      Interrupt interval = 208us ( 1.085*(256-64(TH0)) )
 856          //      When tm001==48, it's 0.01sec.  48*208us
 857          //              
 858          //****************************************************************************/
 859          
 860          
 861          //*****************************************************************************
 862          //      Serial Interrupt                                                   
 863          //*****************************************************************************
 864          #ifdef SERIAL
 865          
 866          //INTERRUPT(4, serial_int)
 867          void serial_int(void) interrupt 4 using 1   // register bank 1
 868          {
 869   1        
 870   1        //day++;
 871   1        //year2=RI;
 872   1        //year1=TI;
 873   1        if( RI ) {          //--- Receive interrupt ----
 874   2          #if 0///def Hs_debug
                    RS_buf[RS_in]=SBUF;
                    RS_in++;
                    if( RS_in>=BUF_MAX) RS_in = 0;
                  #else
 879   2          
 880   2            #ifdef USE_HI3521_UART2
                    #else
 882   2            RS_buf[RS_in]= SBUF;//andy awt 980928
 883   2                RS_in++;
 884   2            if( RS_in>=DVR_BUF_MAX) RS_in = 0;
 885   2            #endif  
 886   2          
 887   2          #endif
 888   2          RI = 0;
 889   2          //month++;
 890   2        }
 891   1      
 892   1        if( TI ) {          //--- Transmit interrupt ----
 893   2          TI = 0;
 894   2          RS_Xbusy=0;
 895   2        }
 896   1      }
 897          
 898          #if 1
 899          //INTERRUPT(12, serial2_int)
 900          void serial2_int(void) interrupt 12 using 1   
 901          {
 902   1        //--- Receive interrupt ----
 903   1        //day++;
 904   1        //year2=S2CON&0x0f;
 905   1        if ((S2CON & 0x01) == 0x01)
 906   1          {         
 907   2          // Clear reception flag
 908   2          S2CON = S2CON&0xfe;
 909   2          //#ifdef USE_HI3521_UART2
 910   2          DVR_buf[RS2_in] = S2BUF;
 911   2          //#endif
 912   2          //month++;
 913   2            RS2_in++;
 914   2          if( RS2_in>=/*BUF_MAX*/DVR_BUF_MAX) RS2_in = 0;
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 16  

 915   2        }
 916   1        
 917   1        if ((S2CON & 0x02) == 0x02)
 918   1        {
 919   2          S2CON = S2CON&0xfd;
 920   2          RS2_Xbusy = 0;
 921   2        }
 922   1      }
 923          
 924          #endif
 925          
 926          //=============================================================================
 927          //    Serial RX Check                            
 928          //=============================================================================
 929          #if (_DEBUG_MESSAGE_Monitor==ON)
              
              BYTE RS_ready(void)
              {
                if( RS_in == RS_out ) return 0;
                else return 1;
              }
              
              //=============================================================================
              //    Serial RX                              
              //=============================================================================
              BYTE RS_rx(void)
              {
                BYTE  ret;
                  
                ES = 0;
                ret = RS_buf[RS_out];
                RS_out++;
                  if(RS_out >= BUF_MAX) 
                  RS_out = 0;
                ES = 1;
              
                return ret;
              }
              #endif
 954          
 955          //=============================================================================
 956          //    Serial RX2 Check                           
 957          //=============================================================================
 958          BYTE RS2_ready(void)
 959          {
 960   1        if( RS2_in == RS2_out ) return 0;
 961   1        else return 1;
 962   1      }
 963          //=============================================================================
 964          //    Serial RX2                               
 965          //=============================================================================
 966          BYTE RS2_rx(void)
 967          {
 968   1        BYTE  ret;
 969   1          
 970   1        AUXIE&=0xEF;  //ES2=0
 971   1        ret = DVR_buf[RS2_out];
 972   1        RS2_out++;
 973   1          if(RS2_out >= DVR_BUF_MAX) 
 974   1          RS2_out = 0;
 975   1        AUXIE|=0x10;  //ES2=1
 976   1      
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 17  

 977   1        return ret;
 978   1      }
 979          
 980          //=============================================================================
 981          //    Serial TX                              
 982          //=============================================================================
 983          #if (_DEBUG_MESSAGE_Monitor==ON)
              void RS_tx(BYTE tx_buf)
              {
                while(RS_Xbusy);
                SBUF = tx_buf;
                RS_Xbusy=1;
              }
              #endif
 991          //=============================================================================
 992          //    Serial2 TX                               
 993          //=============================================================================
 994          
 995          void RS2_tx(BYTE tx_buf)
 996          {
 997   1      
 998   1        while(RS2_Xbusy); 
 999   1          S2BUF=tx_buf;
1000   1          RS2_Xbusy=1;
1001   1      }
1002          
1003          
1004          #endif  // SERIAL
1005          
1006          
1007          
1008          //****************************************************************************/
1009          //      Timer 2 Interrupt                                                  
1010          //      If TH2 and TL2 are overflowed,
1011          //       .Invoke this interrupt
1012          //       .TH2 <- RCAP2H
1013          //       .TL2 <- RCAP2L
1014          //      TL2 is incremented every machine cycle
1015          //      Every machine cycle is 12*Tosc(11.0592MHz)
1016          //
1017          //      Every machine cycle = 1.085us
1018          //      Interrupt interval  
1019          //        1) REMO_RC5 
1020          //          221.34us  ( 1.085*204 )   // (256-52) (0x10000-0xff34)
1021          //
1022          //          data length: 14bit (2sync bits, 1 control bit, 11 data bits) 24,889ms
1023          //
1024          //                +----+
1025          //          1 is coded:      |    |
1026          //                   +----+   
1027          //                  T    T
1028          //
1029          //                   +----+
1030          //          0 is coded: |    |
1031          //                      +----+    
1032          //                  T    T          T = 889us
1033          //
1034          //          *) DongYang
1035          //            209.62  ( 1.085*193 ) // (256-63) (0x10000-0xff3f)
1036          //-----------------------------------------------------------------------------
1037          //        2) REMO_NEC
1038          //          187.714us ( 1.085*173 )     // (256-83) (0x10000-0xff53)
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 18  

1039          //              
1040          //****************************************************************************/
1041          //INTERRUPT(5, timer2_int)
1042          void timer2_int(void) interrupt 5 using 1     // using register block 3
1043          {
1044   1        #if  (_1KHZ_PWM==ON)
                BYTE TempKey;
              
                TF2 = 0;          // clear overflow
                      ET2=0;
              #if 1
                  tm001++;
                
                    //Timer Counter 
                    tic02++;
                
                //  if(tic02>=(10*22))   
                    if(tic02>=(10))  
                  {
                  g_usTimerCounter += 1;     ///per 103us  interrupt
                  tic02=0;
                  g_bNotifyTimer0Int=_TRUE;
                  } 
              #endif
                //tm01++;
              
              #if 1
              
                    if(Time5ms)
                      Time5ms--;
              
                    if(Time5ms==0)
                    {
                      //TempKey=(( (P2&0xC0) >> 6) & 0x03);
                      TempKey=(( (P3&0x0C) >> 2) & 0x03); //ENA&ENB, P3.2, P3.3         
                      
                      if(updn_reg[3] !=TempKey )// (( (P2&0x60) >> 5) & 0x03))  //Abel for HS SW key ......951102                   
                      {                                              
                        updn_reg[0] = updn_reg[1];                                
                        updn_reg[1] = updn_reg[2];                                
                        updn_reg[2] = updn_reg[3];                                
                        updn_reg[3] =TempKey;// ( (P2&0x60) >> 5) & 0x03; 
                        ChangeKey=1;    
                      //else      //william-v1.42-961130
                      //ChangeKey=0;  //william-v1.42-961130
                      Time5ms=(48);
                  
                      if((updn_reg[0] == 0) && (updn_reg[1] == 1) && (updn_reg[2] == 3)&& (updn_reg[3] == 2))  //UP Key   
                           EncorderCount++;        
                      if((updn_reg[0] == 1) && (updn_reg[1] == 3) && (updn_reg[2] == 2)&& (updn_reg[3] == 0))  //UP Key   
                           EncorderCount++;      
                       if((updn_reg[0] == 3) && (updn_reg[1] == 2) && (updn_reg[2] == 0)&& (updn_reg[3] == 1))  //UP Key  
                          EncorderCount++;
                       if((updn_reg[0] == 2) && (updn_reg[1] == 0) && (updn_reg[2] == 1)&& (updn_reg[3] == 3))  //UP Key    
                        EncorderCount++;    
                       
                      if((updn_reg[0] == 0) && (updn_reg[1] == 2)&& (updn_reg[2] == 3)&& (updn_reg[3] == 1))  //DN Key   
                           EncorderCount--;    
                       if((updn_reg[0] == 2) && (updn_reg[1] == 3)&& (updn_reg[2] == 1)&& (updn_reg[3] == 0))  //DN Key   
                           EncorderCount--;     
                      if((updn_reg[0] == 3) && (updn_reg[1] == 1)&& (updn_reg[2] == 0)&& (updn_reg[3] == 2))  //DN Key  
                           EncorderCount--;
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 19  

                      if((updn_reg[0] == 1) && (updn_reg[1] == 0)&& (updn_reg[2] == 2)&& (updn_reg[3] == 3))  //DN Key  
                           EncorderCount--; 
                
                      }
                      
                    }
                    
              #endif
              
              #if 1
                //---------- 0.01 sec timer ------------
                  
                #ifdef CLOCK_11M
                  if( tm001 > 48 ) {      // LJY001220 0.01sec
                #elif defined CLOCK_22M
              //    if( tm001 > ((48*2)*22) ) {   // LJY001220 0.01sec
                  if( tm001 > ((48*2)) ) {  // LJY001220 0.01sec
                #endif
                
                    stopWatch++;
                    tm001 = 0;
                    tic01++;
                  
                    if( tic01==100 ) 
                    {       // 1 sec
                      
                      tic01 = 0;
                      //second++;
                      
                    if(Key)
                      keyticSec++;
                    else
                      keyticSec=0;
                
                    }
                    if( tic_pc!=0xffff ) 
                      tic_pc++;
                
                
                if(tic_Init_time)
                  tic_Init_time--;
                if(Power_Msg_Count)
                  Power_Msg_Count--;
              
                /////////////////////////////////////////// 
              
              #if 1
               if( _ReadKey() )
              {   
                  if (keytic==50)
                  {
                    if((PowerFlag==OFF)||(GET_POWER_STATUS()==_POWER_STATUS_SAVING))
                    {
                    Key = ON;
                    RepeatKey=OFF;  
                    KeyReady = ON;
                    }
                  }
                  else if( keytic==800 ) {//8sec into DVR factory mode  
              
                    if(RepeatKey==ON)
                    {
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 20  

                    Key = ON;
                    KeyReady = ON;      
                    DVR_FACTORY_MODE=ON;
                    RepeatKey=OFF;  
                    }
                      
                  keytic = 51;///51;
                  }
                  
                keytic++;
              }
              else 
                {
                  if( (keytic>=50)&&(PowerFlag==ON)&&(RepeatKey==ON)) {  //0.5sec push
                  Key = ON;
                  KeyReady = ON;
                  }
                  else
                  {
                  Key=OFF;
                  KeyReady = OFF;
                  }
                  
                  RepeatKey = ON;
                  keytic = 0;   
                } 
              #endif
              
                /////////////////////////////////////////// 
                }
              
              
              #endif
              
              TF2 = 0;  
              
              ET2=1;  
                #else
1201   1        TF2 = 0;          // clear overflow
1202   1      
1203   1        tm01++;
1204   1        #endif
1205   1      }
1206          
1207          void delay(BYTE cnt)
1208          {
1209   1        WORD ttic01;
1210   1      
1211   1        ttic01 =  ( tic01 + cnt ) % 100;
1212   1        do {
1213   2          ;
1214   2        } while( tic01 != ttic01 );
1215   1      }
1216          
1217          #if (_POWER_DOWN_ENABLE==ON)
1218          
1219          void int2_int(void) interrupt 6 using 1     // using register block 3
1220          {
1221   1        EX2=0;
1222   1        IE2=0;
1223   1        PCON=0x80;
1224   1        IE=IE_Temp;
C51 COMPILER V9.60.0.0   CPU                                                               03/22/2021 11:23:02 PAGE 21  

1225   1        Power_down_mode=OFF;
1226   1      }
1227          
1228          void int3_int(void) interrupt 7 using 1     // using register block 3
1229          {
1230   1        EX3=0;
1231   1        IE3=0;
1232   1        PCON=0x80;
1233   1        IE=IE_Temp;
1234   1        Power_down_mode=OFF;
1235   1      }
1236          
1237          
1238          
1239          
1240          #endif
1241          
1242          
1243          
1244          
1245          
1246          
1247          
1248          
1249          
1250          
1251          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2710    ----
   CONSTANT SIZE    =   1085    ----
   XDATA SIZE       =     24       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     88    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
